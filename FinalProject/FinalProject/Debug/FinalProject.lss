
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000300c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d8  00802000  0000300c  000030a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000075  008021d8  008021d8  00003278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000032a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  000032f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000113b8  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f00  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007758  00000000  00000000  00019a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016ac  00000000  00000000  00021158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003310e  00000000  00000000  00022804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000683d  00000000  00000000  00055912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0005c150  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b6f0  00000000  00000000  0005c628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c6       	rjmp	.+3212   	; 0xcc6 <__vector_14>
      3a:	00 00       	nop
      3c:	71 c6       	rjmp	.+3298   	; 0xd20 <__vector_15>
      3e:	00 00       	nop
      40:	9c c6       	rjmp	.+3384   	; 0xd7a <__vector_16>
      42:	00 00       	nop
      44:	c7 c6       	rjmp	.+3470   	; 0xdd4 <__vector_17>
      46:	00 00       	nop
      48:	f2 c6       	rjmp	.+3556   	; 0xe2e <__vector_18>
      4a:	00 00       	nop
      4c:	1d c7       	rjmp	.+3642   	; 0xe88 <__vector_19>
      4e:	00 00       	nop
      50:	48 c7       	rjmp	.+3728   	; 0xee2 <__vector_20>
      52:	00 00       	nop
      54:	73 c7       	rjmp	.+3814   	; 0xf3c <__vector_21>
      56:	00 00       	nop
      58:	9e c7       	rjmp	.+3900   	; 0xf96 <__vector_22>
      5a:	00 00       	nop
      5c:	c9 c7       	rjmp	.+3986   	; 0xff0 <__vector_23>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	13 c4       	rjmp	.+2086   	; 0x8c4 <__vector_39>
      9e:	00 00       	nop
      a0:	43 c4       	rjmp	.+2182   	; 0x928 <__vector_40>
      a2:	00 00       	nop
      a4:	73 c4       	rjmp	.+2278   	; 0x98c <__vector_41>
      a6:	00 00       	nop
      a8:	a3 c4       	rjmp	.+2374   	; 0x9f0 <__vector_42>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_47>
      c0:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_48>
      c4:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__vector_49>
      c8:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_50>
      cc:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_51>
      d0:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_52>
      d4:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__vector_53>
      d8:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__vector_54>
      dc:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_55>
      e0:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__vector_56>
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0b c3       	rjmp	.+1558   	; 0x734 <__vector_71>
     11e:	00 00       	nop
     120:	3b c3       	rjmp	.+1654   	; 0x798 <__vector_72>
     122:	00 00       	nop
     124:	6b c3       	rjmp	.+1750   	; 0x7fc <__vector_73>
     126:	00 00       	nop
     128:	9b c3       	rjmp	.+1846   	; 0x860 <__vector_74>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8a c7       	rjmp	.+3860   	; 0x104a <__vector_77>
     136:	00 00       	nop
     138:	b5 c7       	rjmp	.+3946   	; 0x10a4 <__vector_78>
     13a:	00 00       	nop
     13c:	e0 c7       	rjmp	.+4032   	; 0x10fe <__vector_79>
     13e:	00 00       	nop
     140:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_80>
     144:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_81>
     148:	0c 94 06 09 	jmp	0x120c	; 0x120c <__vector_82>
     14c:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__vector_83>
     150:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__vector_84>
     154:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_85>
     158:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_86>
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_108>
     1b4:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__vector_109>
     1b8:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_110>
     1bc:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_111>
     1c0:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_112>
     1c4:	0c 94 8a 0c 	jmp	0x1914	; 0x1914 <__vector_113>
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	2b c0       	rjmp	.+86     	; 0x24c <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	29 c0       	rjmp	.+82     	; 0x24c <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	d3 12       	cpse	r13, r19
     1fe:	e6 12       	cpse	r14, r22
     200:	f9 12       	cpse	r15, r25
     202:	0c 13       	cpse	r16, r28
     204:	1f 13       	cpse	r17, r31
     206:	32 13       	cpse	r19, r18
     208:	45 13       	cpse	r20, r21

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	11 e2       	ldi	r17, 0x21	; 33
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	ec e0       	ldi	r30, 0x0C	; 12
     222:	f0 e3       	ldi	r31, 0x30	; 48
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a8 3d       	cpi	r26, 0xD8	; 216
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	22 e2       	ldi	r18, 0x22	; 34
     236:	a8 ed       	ldi	r26, 0xD8	; 216
     238:	b1 e2       	ldi	r27, 0x21	; 33
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ad 34       	cpi	r26, 0x4D	; 77
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <main>
     248:	0c 94 04 18 	jmp	0x3008	; 0x3008 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     24e:	04 c0       	rjmp	.+8      	; 0x258 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     250:	61 50       	subi	r22, 0x01	; 1
     252:	71 09       	sbc	r23, r1
     254:	81 09       	sbc	r24, r1
     256:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     258:	61 15       	cp	r22, r1
     25a:	71 05       	cpc	r23, r1
     25c:	81 05       	cpc	r24, r1
     25e:	91 05       	cpc	r25, r1
     260:	b9 f7       	brne	.-18     	; 0x250 <__portable_avr_delay_cycles+0x2>
     262:	08 95       	ret

00000264 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     264:	bf 92       	push	r11
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	1f 92       	push	r1
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     27c:	00 e0       	ldi	r16, 0x00	; 0
     27e:	16 e0       	ldi	r17, 0x06	; 6
     280:	68 94       	set
     282:	ff 24       	eor	r15, r15
     284:	f3 f8       	bld	r15, 3
     286:	f8 01       	movw	r30, r16
     288:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     28a:	6e e0       	ldi	r22, 0x0E	; 14
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	dd df       	rcall	.-70     	; 0x24e <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     294:	f8 01       	movw	r30, r16
     296:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     298:	6e e0       	ldi	r22, 0x0E	; 14
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	d6 df       	rcall	.-84     	; 0x24e <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     2a2:	0f 2e       	mov	r0, r31
     2a4:	fb e2       	ldi	r31, 0x2B	; 43
     2a6:	bf 2e       	mov	r11, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     2ac:	80 ea       	ldi	r24, 0xA0	; 160
     2ae:	99 e0       	ldi	r25, 0x09	; 9
     2b0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     2b4:	c1 2c       	mov	r12, r1
     2b6:	d1 2c       	mov	r13, r1
     2b8:	76 01       	movw	r14, r12
     2ba:	00 e4       	ldi	r16, 0x40	; 64
     2bc:	12 e4       	ldi	r17, 0x42	; 66
     2be:	2f e0       	ldi	r18, 0x0F	; 15
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	43 e0       	ldi	r20, 0x03	; 3
     2c4:	be 01       	movw	r22, r28
     2c6:	6f 5f       	subi	r22, 0xFF	; 255
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	80 ea       	ldi	r24, 0xA0	; 160
     2cc:	99 e0       	ldi	r25, 0x09	; 9
     2ce:	0e 94 9f 11 	call	0x233e	; 0x233e <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2d2:	00 e6       	ldi	r16, 0x60	; 96
     2d4:	16 e0       	ldi	r17, 0x06	; 6
     2d6:	ff 24       	eor	r15, r15
     2d8:	f3 94       	inc	r15
     2da:	f8 01       	movw	r30, r16
     2dc:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     2de:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     2e0:	be 01       	movw	r22, r28
     2e2:	6f 5f       	subi	r22, 0xFF	; 255
     2e4:	7f 4f       	sbci	r23, 0xFF	; 255
     2e6:	80 ea       	ldi	r24, 0xA0	; 160
     2e8:	99 e0       	ldi	r25, 0x09	; 9
     2ea:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     2ee:	f8 01       	movw	r30, r16
     2f0:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     2f2:	e0 ea       	ldi	r30, 0xA0	; 160
     2f4:	f9 e0       	ldi	r31, 0x09	; 9
     2f6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     2f8:	85 ff       	sbrs	r24, 5
     2fa:	fd cf       	rjmp	.-6      	; 0x2f6 <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     2fc:	80 ea       	ldi	r24, 0xA0	; 160
     2fe:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     302:	e0 ea       	ldi	r30, 0xA0	; 160
     304:	f9 e0       	ldi	r31, 0x09	; 9
     306:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     308:	86 ff       	sbrs	r24, 6
     30a:	fd cf       	rjmp	.-6      	; 0x306 <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     30c:	e0 ea       	ldi	r30, 0xA0	; 160
     30e:	f9 e0       	ldi	r31, 0x09	; 9
     310:	80 e4       	ldi	r24, 0x40	; 64
     312:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     314:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     316:	be 01       	movw	r22, r28
     318:	6f 5f       	subi	r22, 0xFF	; 255
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	99 e0       	ldi	r25, 0x09	; 9
     320:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     324:	8b e2       	ldi	r24, 0x2B	; 43
     326:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     328:	be 01       	movw	r22, r28
     32a:	6f 5f       	subi	r22, 0xFF	; 255
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	80 ea       	ldi	r24, 0xA0	; 160
     330:	99 e0       	ldi	r25, 0x09	; 9
     332:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     33c:	e0 ea       	ldi	r30, 0xA0	; 160
     33e:	f9 e0       	ldi	r31, 0x09	; 9
     340:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     342:	85 ff       	sbrs	r24, 5
     344:	fd cf       	rjmp	.-6      	; 0x340 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     346:	86 ea       	ldi	r24, 0xA6	; 166
     348:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     34c:	e0 ea       	ldi	r30, 0xA0	; 160
     34e:	f9 e0       	ldi	r31, 0x09	; 9
     350:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     352:	86 ff       	sbrs	r24, 6
     354:	fd cf       	rjmp	.-6      	; 0x350 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     356:	e0 ea       	ldi	r30, 0xA0	; 160
     358:	f9 e0       	ldi	r31, 0x09	; 9
     35a:	80 e4       	ldi	r24, 0x40	; 64
     35c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     35e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     360:	be 01       	movw	r22, r28
     362:	6f 5f       	subi	r22, 0xFF	; 255
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	80 ea       	ldi	r24, 0xA0	; 160
     368:	99 e0       	ldi	r25, 0x09	; 9
     36a:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     36e:	8b e2       	ldi	r24, 0x2B	; 43
     370:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     372:	be 01       	movw	r22, r28
     374:	6f 5f       	subi	r22, 0xFF	; 255
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 ea       	ldi	r24, 0xA0	; 160
     37a:	99 e0       	ldi	r25, 0x09	; 9
     37c:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     386:	e0 ea       	ldi	r30, 0xA0	; 160
     388:	f9 e0       	ldi	r31, 0x09	; 9
     38a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     38c:	85 ff       	sbrs	r24, 5
     38e:	fd cf       	rjmp	.-6      	; 0x38a <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     390:	88 ec       	ldi	r24, 0xC8	; 200
     392:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     396:	e0 ea       	ldi	r30, 0xA0	; 160
     398:	f9 e0       	ldi	r31, 0x09	; 9
     39a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     39c:	86 ff       	sbrs	r24, 6
     39e:	fd cf       	rjmp	.-6      	; 0x39a <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3a0:	e0 ea       	ldi	r30, 0xA0	; 160
     3a2:	f9 e0       	ldi	r31, 0x09	; 9
     3a4:	80 e4       	ldi	r24, 0x40	; 64
     3a6:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3a8:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3aa:	be 01       	movw	r22, r28
     3ac:	6f 5f       	subi	r22, 0xFF	; 255
     3ae:	7f 4f       	sbci	r23, 0xFF	; 255
     3b0:	80 ea       	ldi	r24, 0xA0	; 160
     3b2:	99 e0       	ldi	r25, 0x09	; 9
     3b4:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     3b8:	8b e2       	ldi	r24, 0x2B	; 43
     3ba:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     3bc:	be 01       	movw	r22, r28
     3be:	6f 5f       	subi	r22, 0xFF	; 255
     3c0:	7f 4f       	sbci	r23, 0xFF	; 255
     3c2:	80 ea       	ldi	r24, 0xA0	; 160
     3c4:	99 e0       	ldi	r25, 0x09	; 9
     3c6:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     3d0:	e0 ea       	ldi	r30, 0xA0	; 160
     3d2:	f9 e0       	ldi	r31, 0x09	; 9
     3d4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     3d6:	85 ff       	sbrs	r24, 5
     3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     3da:	82 ea       	ldi	r24, 0xA2	; 162
     3dc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     3e0:	e0 ea       	ldi	r30, 0xA0	; 160
     3e2:	f9 e0       	ldi	r31, 0x09	; 9
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     3e6:	86 ff       	sbrs	r24, 6
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     3ea:	e0 ea       	ldi	r30, 0xA0	; 160
     3ec:	f9 e0       	ldi	r31, 0x09	; 9
     3ee:	80 e4       	ldi	r24, 0x40	; 64
     3f0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     3f2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     3f4:	be 01       	movw	r22, r28
     3f6:	6f 5f       	subi	r22, 0xFF	; 255
     3f8:	7f 4f       	sbci	r23, 0xFF	; 255
     3fa:	80 ea       	ldi	r24, 0xA0	; 160
     3fc:	99 e0       	ldi	r25, 0x09	; 9
     3fe:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     402:	8b e2       	ldi	r24, 0x2B	; 43
     404:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     406:	be 01       	movw	r22, r28
     408:	6f 5f       	subi	r22, 0xFF	; 255
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	80 ea       	ldi	r24, 0xA0	; 160
     40e:	99 e0       	ldi	r25, 0x09	; 9
     410:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     41a:	e0 ea       	ldi	r30, 0xA0	; 160
     41c:	f9 e0       	ldi	r31, 0x09	; 9
     41e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     420:	85 ff       	sbrs	r24, 5
     422:	fd cf       	rjmp	.-6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     424:	8f e2       	ldi	r24, 0x2F	; 47
     426:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     42a:	e0 ea       	ldi	r30, 0xA0	; 160
     42c:	f9 e0       	ldi	r31, 0x09	; 9
     42e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     430:	86 ff       	sbrs	r24, 6
     432:	fd cf       	rjmp	.-6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     434:	e0 ea       	ldi	r30, 0xA0	; 160
     436:	f9 e0       	ldi	r31, 0x09	; 9
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     43c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     43e:	be 01       	movw	r22, r28
     440:	6f 5f       	subi	r22, 0xFF	; 255
     442:	7f 4f       	sbci	r23, 0xFF	; 255
     444:	80 ea       	ldi	r24, 0xA0	; 160
     446:	99 e0       	ldi	r25, 0x09	; 9
     448:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     44c:	8b e2       	ldi	r24, 0x2B	; 43
     44e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     450:	be 01       	movw	r22, r28
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	80 ea       	ldi	r24, 0xA0	; 160
     458:	99 e0       	ldi	r25, 0x09	; 9
     45a:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     464:	e0 ea       	ldi	r30, 0xA0	; 160
     466:	f9 e0       	ldi	r31, 0x09	; 9
     468:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     46a:	85 ff       	sbrs	r24, 5
     46c:	fd cf       	rjmp	.-6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     46e:	88 ef       	ldi	r24, 0xF8	; 248
     470:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     474:	e0 ea       	ldi	r30, 0xA0	; 160
     476:	f9 e0       	ldi	r31, 0x09	; 9
     478:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     47a:	86 ff       	sbrs	r24, 6
     47c:	fd cf       	rjmp	.-6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     47e:	e0 ea       	ldi	r30, 0xA0	; 160
     480:	f9 e0       	ldi	r31, 0x09	; 9
     482:	80 e4       	ldi	r24, 0x40	; 64
     484:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     486:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     488:	be 01       	movw	r22, r28
     48a:	6f 5f       	subi	r22, 0xFF	; 255
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	80 ea       	ldi	r24, 0xA0	; 160
     490:	99 e0       	ldi	r25, 0x09	; 9
     492:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     496:	8b e2       	ldi	r24, 0x2B	; 43
     498:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     49a:	be 01       	movw	r22, r28
     49c:	6f 5f       	subi	r22, 0xFF	; 255
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	80 ea       	ldi	r24, 0xA0	; 160
     4a2:	99 e0       	ldi	r25, 0x09	; 9
     4a4:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4ae:	e0 ea       	ldi	r30, 0xA0	; 160
     4b0:	f9 e0       	ldi	r31, 0x09	; 9
     4b2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4b4:	85 ff       	sbrs	r24, 5
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     4b8:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     4bc:	e0 ea       	ldi	r30, 0xA0	; 160
     4be:	f9 e0       	ldi	r31, 0x09	; 9
     4c0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     4c2:	86 ff       	sbrs	r24, 6
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     4c6:	e0 ea       	ldi	r30, 0xA0	; 160
     4c8:	f9 e0       	ldi	r31, 0x09	; 9
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     4ce:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	80 ea       	ldi	r24, 0xA0	; 160
     4d8:	99 e0       	ldi	r25, 0x09	; 9
     4da:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     4de:	8b e2       	ldi	r24, 0x2B	; 43
     4e0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     4e2:	be 01       	movw	r22, r28
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	80 ea       	ldi	r24, 0xA0	; 160
     4ea:	99 e0       	ldi	r25, 0x09	; 9
     4ec:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     4f6:	e0 ea       	ldi	r30, 0xA0	; 160
     4f8:	f9 e0       	ldi	r31, 0x09	; 9
     4fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     4fc:	85 ff       	sbrs	r24, 5
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     500:	81 e2       	ldi	r24, 0x21	; 33
     502:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     506:	e0 ea       	ldi	r30, 0xA0	; 160
     508:	f9 e0       	ldi	r31, 0x09	; 9
     50a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     50c:	86 ff       	sbrs	r24, 6
     50e:	fd cf       	rjmp	.-6      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     510:	e0 ea       	ldi	r30, 0xA0	; 160
     512:	f9 e0       	ldi	r31, 0x09	; 9
     514:	80 e4       	ldi	r24, 0x40	; 64
     516:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     518:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	80 ea       	ldi	r24, 0xA0	; 160
     522:	99 e0       	ldi	r25, 0x09	; 9
     524:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     528:	8b e2       	ldi	r24, 0x2B	; 43
     52a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     52c:	be 01       	movw	r22, r28
     52e:	6f 5f       	subi	r22, 0xFF	; 255
     530:	7f 4f       	sbci	r23, 0xFF	; 255
     532:	80 ea       	ldi	r24, 0xA0	; 160
     534:	99 e0       	ldi	r25, 0x09	; 9
     536:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     540:	e0 ea       	ldi	r30, 0xA0	; 160
     542:	f9 e0       	ldi	r31, 0x09	; 9
     544:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     546:	85 ff       	sbrs	r24, 5
     548:	fd cf       	rjmp	.-6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     54a:	81 e8       	ldi	r24, 0x81	; 129
     54c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     550:	e0 ea       	ldi	r30, 0xA0	; 160
     552:	f9 e0       	ldi	r31, 0x09	; 9
     554:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     556:	86 ff       	sbrs	r24, 6
     558:	fd cf       	rjmp	.-6      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     55a:	e0 ea       	ldi	r30, 0xA0	; 160
     55c:	f9 e0       	ldi	r31, 0x09	; 9
     55e:	80 e4       	ldi	r24, 0x40	; 64
     560:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     562:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     572:	8b e2       	ldi	r24, 0x2B	; 43
     574:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     576:	be 01       	movw	r22, r28
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	80 ea       	ldi	r24, 0xA0	; 160
     57e:	99 e0       	ldi	r25, 0x09	; 9
     580:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     590:	85 ff       	sbrs	r24, 5
     592:	fd cf       	rjmp	.-6      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     594:	81 e2       	ldi	r24, 0x21	; 33
     596:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     59a:	e0 ea       	ldi	r30, 0xA0	; 160
     59c:	f9 e0       	ldi	r31, 0x09	; 9
     59e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5a0:	86 ff       	sbrs	r24, 6
     5a2:	fd cf       	rjmp	.-6      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5a4:	e0 ea       	ldi	r30, 0xA0	; 160
     5a6:	f9 e0       	ldi	r31, 0x09	; 9
     5a8:	80 e4       	ldi	r24, 0x40	; 64
     5aa:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5ac:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5ae:	be 01       	movw	r22, r28
     5b0:	6f 5f       	subi	r22, 0xFF	; 255
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	80 ea       	ldi	r24, 0xA0	; 160
     5b6:	99 e0       	ldi	r25, 0x09	; 9
     5b8:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5bc:	8b e2       	ldi	r24, 0x2B	; 43
     5be:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5c0:	be 01       	movw	r22, r28
     5c2:	6f 5f       	subi	r22, 0xFF	; 255
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	80 ea       	ldi	r24, 0xA0	; 160
     5c8:	99 e0       	ldi	r25, 0x09	; 9
     5ca:	0e 94 b9 11 	call	0x2372	; 0x2372 <usart_spi_select_device>
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5d4:	e0 ea       	ldi	r30, 0xA0	; 160
     5d6:	f9 e0       	ldi	r31, 0x09	; 9
     5d8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5da:	85 ff       	sbrs	r24, 5
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5de:	8f ea       	ldi	r24, 0xAF	; 175
     5e0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5e4:	e0 ea       	ldi	r30, 0xA0	; 160
     5e6:	f9 e0       	ldi	r31, 0x09	; 9
     5e8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5ea:	86 ff       	sbrs	r24, 6
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5ee:	e0 ea       	ldi	r30, 0xA0	; 160
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	80 e4       	ldi	r24, 0x40	; 64
     5f4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5f6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5f8:	be 01       	movw	r22, r28
     5fa:	6f 5f       	subi	r22, 0xFF	; 255
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	80 ea       	ldi	r24, 0xA0	; 160
     600:	99 e0       	ldi	r25, 0x09	; 9
     602:	0e 94 cf 11 	call	0x239e	; 0x239e <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     606:	0f 90       	pop	r0
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	08 95       	ret

0000061c <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	1f 92       	push	r1
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     626:	2f b7       	in	r18, 0x3f	; 63
     628:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
     62a:	f8 94       	cli
	return flags;
     62c:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     62e:	28 2f       	mov	r18, r24
     630:	39 2f       	mov	r19, r25
     632:	21 15       	cp	r18, r1
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	38 07       	cpc	r19, r24
     638:	29 f4       	brne	.+10     	; 0x644 <adc_set_callback+0x28>
		adca_callback = callback;
     63a:	60 93 2b 22 	sts	0x222B, r22	; 0x80222b <adca_callback>
     63e:	70 93 2c 22 	sts	0x222C, r23	; 0x80222c <adca_callback+0x1>
     642:	07 c0       	rjmp	.+14     	; 0x652 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     644:	20 34       	cpi	r18, 0x40	; 64
     646:	32 40       	sbci	r19, 0x02	; 2
     648:	21 f4       	brne	.+8      	; 0x652 <adc_set_callback+0x36>
		adcb_callback = callback;
     64a:	60 93 29 22 	sts	0x2229, r22	; 0x802229 <adcb_callback>
     64e:	70 93 2a 22 	sts	0x222A, r23	; 0x80222a <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     652:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
     654:	0f 90       	pop	r0
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     65c:	81 15       	cp	r24, r1
     65e:	22 e0       	ldi	r18, 0x02	; 2
     660:	92 07       	cpc	r25, r18
     662:	69 f4       	brne	.+26     	; 0x67e <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     664:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <adca_enable_count>
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	98 0f       	add	r25, r24
     66c:	90 93 d9 21 	sts	0x21D9, r25	; 0x8021d9 <adca_enable_count>
     670:	81 11       	cpse	r24, r1
     672:	14 c0       	rjmp	.+40     	; 0x69c <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	0c 94 1e 12 	jmp	0x243c	; 0x243c <sysclk_enable_module>
     67c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     67e:	80 34       	cpi	r24, 0x40	; 64
     680:	92 40       	sbci	r25, 0x02	; 2
     682:	61 f4       	brne	.+24     	; 0x69c <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     684:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <__data_end>
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	98 0f       	add	r25, r24
     68c:	90 93 d8 21 	sts	0x21D8, r25	; 0x8021d8 <__data_end>
     690:	81 11       	cpse	r24, r1
     692:	04 c0       	rjmp	.+8      	; 0x69c <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     694:	62 e0       	ldi	r22, 0x02	; 2
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	0c 94 1e 12 	jmp	0x243c	; 0x243c <sysclk_enable_module>
     69c:	08 95       	ret

0000069e <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     69e:	81 15       	cp	r24, r1
     6a0:	22 e0       	ldi	r18, 0x02	; 2
     6a2:	92 07       	cpc	r25, r18
     6a4:	61 f4       	brne	.+24     	; 0x6be <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     6a6:	80 91 d9 21 	lds	r24, 0x21D9	; 0x8021d9 <adca_enable_count>
     6aa:	81 50       	subi	r24, 0x01	; 1
     6ac:	80 93 d9 21 	sts	0x21D9, r24	; 0x8021d9 <adca_enable_count>
     6b0:	81 11       	cpse	r24, r1
     6b2:	13 c0       	rjmp	.+38     	; 0x6da <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     6b4:	62 e0       	ldi	r22, 0x02	; 2
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0c 94 34 12 	jmp	0x2468	; 0x2468 <sysclk_disable_module>
     6bc:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     6be:	80 34       	cpi	r24, 0x40	; 64
     6c0:	92 40       	sbci	r25, 0x02	; 2
     6c2:	59 f4       	brne	.+22     	; 0x6da <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     6c4:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <__data_end>
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	80 93 d8 21 	sts	0x21D8, r24	; 0x8021d8 <__data_end>
     6ce:	81 11       	cpse	r24, r1
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     6d2:	62 e0       	ldi	r22, 0x02	; 2
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0c 94 34 12 	jmp	0x2468	; 0x2468 <sysclk_disable_module>
     6da:	08 95       	ret

000006dc <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	1f 92       	push	r1
     6e8:	1f 92       	push	r1
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6f0:	8f b7       	in	r24, 0x3f	; 63
     6f2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     6f4:	f8 94       	cli
	return flags;
     6f6:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     6f8:	c7 01       	movw	r24, r14
     6fa:	b0 df       	rcall	.-160    	; 0x65c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     6fc:	f7 01       	movw	r30, r14
     6fe:	80 81       	ld	r24, Z
     700:	81 60       	ori	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     704:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
     706:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <sleepmgr_locks+0x1>
     70a:	8f 3f       	cpi	r24, 0xFF	; 255
     70c:	09 f4       	brne	.+2      	; 0x710 <adc_enable+0x34>
     70e:	ff cf       	rjmp	.-2      	; 0x70e <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     710:	8f b7       	in	r24, 0x3f	; 63
     712:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     714:	f8 94       	cli
	return flags;
     716:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     718:	e3 e2       	ldi	r30, 0x23	; 35
     71a:	f2 e2       	ldi	r31, 0x22	; 34
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	8f 5f       	subi	r24, 0xFF	; 255
     720:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     722:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	08 95       	ret

00000734 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	0b b6       	in	r0, 0x3b	; 59
     740:	0f 92       	push	r0
     742:	2f 93       	push	r18
     744:	3f 93       	push	r19
     746:	4f 93       	push	r20
     748:	5f 93       	push	r21
     74a:	6f 93       	push	r22
     74c:	7f 93       	push	r23
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     75a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     75e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     762:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <adca_callback>
     766:	f0 91 2c 22 	lds	r31, 0x222C	; 0x80222c <adca_callback+0x1>
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	19 95       	eicall
}
     772:	ff 91       	pop	r31
     774:	ef 91       	pop	r30
     776:	bf 91       	pop	r27
     778:	af 91       	pop	r26
     77a:	9f 91       	pop	r25
     77c:	8f 91       	pop	r24
     77e:	7f 91       	pop	r23
     780:	6f 91       	pop	r22
     782:	5f 91       	pop	r21
     784:	4f 91       	pop	r20
     786:	3f 91       	pop	r19
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	0b be       	out	0x3b, r0	; 59
     78e:	0f 90       	pop	r0
     790:	0f be       	out	0x3f, r0	; 63
     792:	0f 90       	pop	r0
     794:	1f 90       	pop	r1
     796:	18 95       	reti

00000798 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
     7a2:	0b b6       	in	r0, 0x3b	; 59
     7a4:	0f 92       	push	r0
     7a6:	2f 93       	push	r18
     7a8:	3f 93       	push	r19
     7aa:	4f 93       	push	r20
     7ac:	5f 93       	push	r21
     7ae:	6f 93       	push	r22
     7b0:	7f 93       	push	r23
     7b2:	8f 93       	push	r24
     7b4:	9f 93       	push	r25
     7b6:	af 93       	push	r26
     7b8:	bf 93       	push	r27
     7ba:	ef 93       	push	r30
     7bc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     7be:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     7c2:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     7c6:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <adca_callback>
     7ca:	f0 91 2c 22 	lds	r31, 0x222C	; 0x80222c <adca_callback+0x1>
     7ce:	62 e0       	ldi	r22, 0x02	; 2
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	19 95       	eicall
}
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0b be       	out	0x3b, r0	; 59
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     822:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     826:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     82a:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <adca_callback>
     82e:	f0 91 2c 22 	lds	r31, 0x222C	; 0x80222c <adca_callback+0x1>
     832:	64 e0       	ldi	r22, 0x04	; 4
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	19 95       	eicall
}
     83a:	ff 91       	pop	r31
     83c:	ef 91       	pop	r30
     83e:	bf 91       	pop	r27
     840:	af 91       	pop	r26
     842:	9f 91       	pop	r25
     844:	8f 91       	pop	r24
     846:	7f 91       	pop	r23
     848:	6f 91       	pop	r22
     84a:	5f 91       	pop	r21
     84c:	4f 91       	pop	r20
     84e:	3f 91       	pop	r19
     850:	2f 91       	pop	r18
     852:	0f 90       	pop	r0
     854:	0b be       	out	0x3b, r0	; 59
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	0b b6       	in	r0, 0x3b	; 59
     86c:	0f 92       	push	r0
     86e:	2f 93       	push	r18
     870:	3f 93       	push	r19
     872:	4f 93       	push	r20
     874:	5f 93       	push	r21
     876:	6f 93       	push	r22
     878:	7f 93       	push	r23
     87a:	8f 93       	push	r24
     87c:	9f 93       	push	r25
     87e:	af 93       	push	r26
     880:	bf 93       	push	r27
     882:	ef 93       	push	r30
     884:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     886:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     88a:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     88e:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <adca_callback>
     892:	f0 91 2c 22 	lds	r31, 0x222C	; 0x80222c <adca_callback+0x1>
     896:	68 e0       	ldi	r22, 0x08	; 8
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	19 95       	eicall
}
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	bf 91       	pop	r27
     8a4:	af 91       	pop	r26
     8a6:	9f 91       	pop	r25
     8a8:	8f 91       	pop	r24
     8aa:	7f 91       	pop	r23
     8ac:	6f 91       	pop	r22
     8ae:	5f 91       	pop	r21
     8b0:	4f 91       	pop	r20
     8b2:	3f 91       	pop	r19
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0b be       	out	0x3b, r0	; 59
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	0b b6       	in	r0, 0x3b	; 59
     8d0:	0f 92       	push	r0
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	ef 93       	push	r30
     8e8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     8ea:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     8ee:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     8f2:	e0 91 29 22 	lds	r30, 0x2229	; 0x802229 <adcb_callback>
     8f6:	f0 91 2a 22 	lds	r31, 0x222A	; 0x80222a <adcb_callback+0x1>
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	80 e4       	ldi	r24, 0x40	; 64
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	19 95       	eicall
}
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	bf 91       	pop	r27
     908:	af 91       	pop	r26
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	7f 91       	pop	r23
     910:	6f 91       	pop	r22
     912:	5f 91       	pop	r21
     914:	4f 91       	pop	r20
     916:	3f 91       	pop	r19
     918:	2f 91       	pop	r18
     91a:	0f 90       	pop	r0
     91c:	0b be       	out	0x3b, r0	; 59
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63
     922:	0f 90       	pop	r0
     924:	1f 90       	pop	r1
     926:	18 95       	reti

00000928 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	0b b6       	in	r0, 0x3b	; 59
     934:	0f 92       	push	r0
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     94e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     952:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     956:	e0 91 29 22 	lds	r30, 0x2229	; 0x802229 <adcb_callback>
     95a:	f0 91 2a 22 	lds	r31, 0x222A	; 0x80222a <adcb_callback+0x1>
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	80 e4       	ldi	r24, 0x40	; 64
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	19 95       	eicall
}
     966:	ff 91       	pop	r31
     968:	ef 91       	pop	r30
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	0f 90       	pop	r0
     980:	0b be       	out	0x3b, r0	; 59
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	0b b6       	in	r0, 0x3b	; 59
     998:	0f 92       	push	r0
     99a:	2f 93       	push	r18
     99c:	3f 93       	push	r19
     99e:	4f 93       	push	r20
     9a0:	5f 93       	push	r21
     9a2:	6f 93       	push	r22
     9a4:	7f 93       	push	r23
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	af 93       	push	r26
     9ac:	bf 93       	push	r27
     9ae:	ef 93       	push	r30
     9b0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     9b2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     9b6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     9ba:	e0 91 29 22 	lds	r30, 0x2229	; 0x802229 <adcb_callback>
     9be:	f0 91 2a 22 	lds	r31, 0x222A	; 0x80222a <adcb_callback+0x1>
     9c2:	64 e0       	ldi	r22, 0x04	; 4
     9c4:	80 e4       	ldi	r24, 0x40	; 64
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	19 95       	eicall
}
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0b be       	out	0x3b, r0	; 59
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	0b b6       	in	r0, 0x3b	; 59
     9fc:	0f 92       	push	r0
     9fe:	2f 93       	push	r18
     a00:	3f 93       	push	r19
     a02:	4f 93       	push	r20
     a04:	5f 93       	push	r21
     a06:	6f 93       	push	r22
     a08:	7f 93       	push	r23
     a0a:	8f 93       	push	r24
     a0c:	9f 93       	push	r25
     a0e:	af 93       	push	r26
     a10:	bf 93       	push	r27
     a12:	ef 93       	push	r30
     a14:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     a16:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     a1a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     a1e:	e0 91 29 22 	lds	r30, 0x2229	; 0x802229 <adcb_callback>
     a22:	f0 91 2a 22 	lds	r31, 0x222A	; 0x80222a <adcb_callback+0x1>
     a26:	68 e0       	ldi	r22, 0x08	; 8
     a28:	80 e4       	ldi	r24, 0x40	; 64
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	19 95       	eicall
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0b be       	out	0x3b, r0	; 59
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	1f 92       	push	r1
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	8c 01       	movw	r16, r24
     a6e:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     a70:	81 15       	cp	r24, r1
     a72:	22 e0       	ldi	r18, 0x02	; 2
     a74:	92 07       	cpc	r25, r18
     a76:	81 f4       	brne	.+32     	; 0xa98 <adc_write_configuration+0x44>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     a78:	61 e2       	ldi	r22, 0x21	; 33
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	0e 94 49 12 	call	0x2492	; 0x2492 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     a82:	c8 2e       	mov	r12, r24
     a84:	d1 2c       	mov	r13, r1
     a86:	60 e2       	ldi	r22, 0x20	; 32
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	0e 94 49 12 	call	0x2492	; 0x2492 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
     a90:	dc 2c       	mov	r13, r12
     a92:	cc 24       	eor	r12, r12
     a94:	c8 2a       	or	r12, r24
     a96:	12 c0       	rjmp	.+36     	; 0xabc <adc_write_configuration+0x68>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     a98:	80 34       	cpi	r24, 0x40	; 64
     a9a:	92 40       	sbci	r25, 0x02	; 2
     a9c:	d1 f5       	brne	.+116    	; 0xb12 <adc_write_configuration+0xbe>
     a9e:	65 e2       	ldi	r22, 0x25	; 37
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	0e 94 49 12 	call	0x2492	; 0x2492 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     aa8:	c8 2e       	mov	r12, r24
     aaa:	d1 2c       	mov	r13, r1
     aac:	64 e2       	ldi	r22, 0x24	; 36
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0e 94 49 12 	call	0x2492	; 0x2492 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
     ab6:	dc 2c       	mov	r13, r12
     ab8:	cc 24       	eor	r12, r12
     aba:	c8 2a       	or	r12, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     abc:	8f b7       	in	r24, 0x3f	; 63
     abe:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     ac0:	f8 94       	cli
	return flags;
     ac2:	b9 80       	ldd	r11, Y+1	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     ac4:	c8 01       	movw	r24, r16
     ac6:	ca dd       	rcall	.-1132   	; 0x65c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     ac8:	f8 01       	movw	r30, r16
     aca:	80 81       	ld	r24, Z

	adc->CTRLA = ADC_FLUSH_bm;
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	90 83       	st	Z, r25
	adc->CAL = cal;
     ad0:	c4 86       	std	Z+12, r12	; 0x0c
     ad2:	d5 86       	std	Z+13, r13	; 0x0d
	adc->CMP = conf->cmp;
     ad4:	f7 01       	movw	r30, r14
     ad6:	25 81       	ldd	r18, Z+5	; 0x05
     ad8:	36 81       	ldd	r19, Z+6	; 0x06
     ada:	f8 01       	movw	r30, r16
     adc:	20 8f       	std	Z+24, r18	; 0x18
     ade:	31 8f       	std	Z+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
     ae0:	f7 01       	movw	r30, r14
     ae2:	92 81       	ldd	r25, Z+2	; 0x02
     ae4:	f8 01       	movw	r30, r16
     ae6:	92 83       	std	Z+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
     ae8:	f7 01       	movw	r30, r14
     aea:	94 81       	ldd	r25, Z+4	; 0x04
     aec:	f8 01       	movw	r30, r16
     aee:	94 83       	std	Z+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
     af0:	f7 01       	movw	r30, r14
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	f8 01       	movw	r30, r16
     af6:	93 83       	std	Z+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
     af8:	f7 01       	movw	r30, r14
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	f8 01       	movw	r30, r16
     afe:	91 83       	std	Z+1, r25	; 0x01

	adc->CTRLA = enable | conf->ctrla;
     b00:	81 70       	andi	r24, 0x01	; 1
     b02:	f7 01       	movw	r30, r14
     b04:	90 81       	ld	r25, Z
     b06:	89 2b       	or	r24, r25
     b08:	f8 01       	movw	r30, r16

	adc_disable_clock(adc);
     b0a:	80 83       	st	Z, r24
     b0c:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b0e:	c7 dd       	rcall	.-1138   	; 0x69e <adc_disable_clock>

	cpu_irq_restore(flags);
}
     b10:	bf be       	out	0x3f, r11	; 63
     b12:	0f 90       	pop	r0
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	bf 90       	pop	r11
     b26:	08 95       	ret

00000b28 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	1f 92       	push	r1
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	8c 01       	movw	r16, r24
     b3e:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b40:	8f b7       	in	r24, 0x3f	; 63
     b42:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b44:	f8 94       	cli
	return flags;
     b46:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     b48:	c8 01       	movw	r24, r16
     b4a:	88 dd       	rcall	.-1264   	; 0x65c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     b4c:	f8 01       	movw	r30, r16
     b4e:	80 81       	ld	r24, Z
     b50:	80 7c       	andi	r24, 0xC0	; 192
     b52:	f7 01       	movw	r30, r14
     b54:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     b56:	f8 01       	movw	r30, r16
     b58:	80 8d       	ldd	r24, Z+24	; 0x18
     b5a:	91 8d       	ldd	r25, Z+25	; 0x19
     b5c:	f7 01       	movw	r30, r14
     b5e:	85 83       	std	Z+5, r24	; 0x05
     b60:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     b62:	f8 01       	movw	r30, r16
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	f7 01       	movw	r30, r14
     b68:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     b6a:	f8 01       	movw	r30, r16
     b6c:	84 81       	ldd	r24, Z+4	; 0x04
     b6e:	f7 01       	movw	r30, r14
     b70:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     b72:	f8 01       	movw	r30, r16
     b74:	83 81       	ldd	r24, Z+3	; 0x03
     b76:	f7 01       	movw	r30, r14
     b78:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     b7a:	f8 01       	movw	r30, r16
     b7c:	81 81       	ldd	r24, Z+1	; 0x01
     b7e:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
     b80:	81 83       	std	Z+1, r24	; 0x01
     b82:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b84:	8c dd       	rcall	.-1256   	; 0x69e <adc_disable_clock>

	cpu_irq_restore(flags);
}
     b86:	df be       	out	0x3f, r13	; 63
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	08 95       	ret

00000b9a <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	1f 92       	push	r1
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	6c 01       	movw	r12, r24
     bb6:	b6 2e       	mov	r11, r22
     bb8:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     bba:	86 2f       	mov	r24, r22
     bbc:	83 70       	andi	r24, 0x03	; 3
     bbe:	29 f4       	brne	.+10     	; 0xbca <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     bc0:	96 2f       	mov	r25, r22
     bc2:	96 95       	lsr	r25
     bc4:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     bca:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     bce:	90 ff       	sbrs	r25, 0
		index++;
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     bd2:	86 01       	movw	r16, r12
     bd4:	00 5e       	subi	r16, 0xE0	; 224
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	98 e0       	ldi	r25, 0x08	; 8
     bda:	89 9f       	mul	r24, r25
     bdc:	00 0d       	add	r16, r0
     bde:	11 1d       	adc	r17, r1
     be0:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     be2:	8f b7       	in	r24, 0x3f	; 63
     be4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     be6:	f8 94       	cli
	return flags;
     be8:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     bea:	c6 01       	movw	r24, r12
     bec:	37 dd       	rcall	.-1426   	; 0x65c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     bee:	f7 01       	movw	r30, r14
     bf0:	80 81       	ld	r24, Z
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     bf6:	f7 01       	movw	r30, r14
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	f8 01       	movw	r30, r16
     bfc:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     bfe:	f7 01       	movw	r30, r14
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	f8 01       	movw	r30, r16
     c04:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     c06:	b0 fe       	sbrs	r11, 0
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     c0a:	f7 01       	movw	r30, r14
     c0c:	83 81       	ldd	r24, Z+3	; 0x03
     c0e:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
     c10:	86 83       	std	Z+6, r24	; 0x06
     c12:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c14:	44 dd       	rcall	.-1400   	; 0x69e <adc_disable_clock>

	cpu_irq_restore(flags);
}
     c16:	af be       	out	0x3f, r10	; 63
     c18:	0f 90       	pop	r0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	bf 90       	pop	r11
     c2c:	af 90       	pop	r10
     c2e:	08 95       	ret

00000c30 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     c30:	af 92       	push	r10
     c32:	bf 92       	push	r11
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	1f 92       	push	r1
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	6c 01       	movw	r12, r24
     c4c:	b6 2e       	mov	r11, r22
     c4e:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c50:	86 2f       	mov	r24, r22
     c52:	83 70       	andi	r24, 0x03	; 3
     c54:	29 f4       	brne	.+10     	; 0xc60 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
     c56:	96 2f       	mov	r25, r22
     c58:	96 95       	lsr	r25
     c5a:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     c60:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     c62:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     c64:	90 ff       	sbrs	r25, 0
		index++;
     c66:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     c68:	86 01       	movw	r16, r12
     c6a:	00 5e       	subi	r16, 0xE0	; 224
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	98 e0       	ldi	r25, 0x08	; 8
     c70:	89 9f       	mul	r24, r25
     c72:	00 0d       	add	r16, r0
     c74:	11 1d       	adc	r17, r1
     c76:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c78:	8f b7       	in	r24, 0x3f	; 63
     c7a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c7c:	f8 94       	cli
	return flags;
     c7e:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     c80:	c6 01       	movw	r24, r12
     c82:	ec dc       	rcall	.-1576   	; 0x65c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     c84:	f8 01       	movw	r30, r16
     c86:	80 81       	ld	r24, Z
     c88:	f7 01       	movw	r30, r14
     c8a:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     c8c:	f8 01       	movw	r30, r16
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	f7 01       	movw	r30, r14
     c92:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     c94:	f8 01       	movw	r30, r16
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	f7 01       	movw	r30, r14
     c9a:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     c9c:	b0 fe       	sbrs	r11, 0
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     ca0:	f8 01       	movw	r30, r16
     ca2:	86 81       	ldd	r24, Z+6	; 0x06
     ca4:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
     ca6:	83 83       	std	Z+3, r24	; 0x03
     ca8:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     caa:	f9 dc       	rcall	.-1550   	; 0x69e <adc_disable_clock>

	cpu_irq_restore(flags);
}
     cac:	af be       	out	0x3f, r10	; 63
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	df 90       	pop	r13
     cbe:	cf 90       	pop	r12
     cc0:	bf 90       	pop	r11
     cc2:	af 90       	pop	r10
     cc4:	08 95       	ret

00000cc6 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	0b b6       	in	r0, 0x3b	; 59
     cd2:	0f 92       	push	r0
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     cec:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <tc_tcc0_ovf_callback>
     cf0:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <tc_tcc0_ovf_callback+0x1>
     cf4:	30 97       	sbiw	r30, 0x00	; 0
     cf6:	09 f0       	breq	.+2      	; 0xcfa <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     cf8:	19 95       	eicall
	}
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	0b b6       	in	r0, 0x3b	; 59
     d2c:	0f 92       	push	r0
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     d46:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <tc_tcc0_err_callback>
     d4a:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <tc_tcc0_err_callback+0x1>
     d4e:	30 97       	sbiw	r30, 0x00	; 0
     d50:	09 f0       	breq	.+2      	; 0xd54 <__vector_15+0x34>
		tc_tcc0_err_callback();
     d52:	19 95       	eicall
	}
}
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0b be       	out	0x3b, r0	; 59
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	0b b6       	in	r0, 0x3b	; 59
     d86:	0f 92       	push	r0
     d88:	2f 93       	push	r18
     d8a:	3f 93       	push	r19
     d8c:	4f 93       	push	r20
     d8e:	5f 93       	push	r21
     d90:	6f 93       	push	r22
     d92:	7f 93       	push	r23
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     da0:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <tc_tcc0_cca_callback>
     da4:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <tc_tcc0_cca_callback+0x1>
     da8:	30 97       	sbiw	r30, 0x00	; 0
     daa:	09 f0       	breq	.+2      	; 0xdae <__vector_16+0x34>
		tc_tcc0_cca_callback();
     dac:	19 95       	eicall
	}
}
     dae:	ff 91       	pop	r31
     db0:	ef 91       	pop	r30
     db2:	bf 91       	pop	r27
     db4:	af 91       	pop	r26
     db6:	9f 91       	pop	r25
     db8:	8f 91       	pop	r24
     dba:	7f 91       	pop	r23
     dbc:	6f 91       	pop	r22
     dbe:	5f 91       	pop	r21
     dc0:	4f 91       	pop	r20
     dc2:	3f 91       	pop	r19
     dc4:	2f 91       	pop	r18
     dc6:	0f 90       	pop	r0
     dc8:	0b be       	out	0x3b, r0	; 59
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	0b b6       	in	r0, 0x3b	; 59
     de0:	0f 92       	push	r0
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	7f 93       	push	r23
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     dfa:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <tc_tcc0_ccb_callback>
     dfe:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <tc_tcc0_ccb_callback+0x1>
     e02:	30 97       	sbiw	r30, 0x00	; 0
     e04:	09 f0       	breq	.+2      	; 0xe08 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     e06:	19 95       	eicall
	}
}
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	0f 90       	pop	r0
     e22:	0b be       	out	0x3b, r0	; 59
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	0b b6       	in	r0, 0x3b	; 59
     e3a:	0f 92       	push	r0
     e3c:	2f 93       	push	r18
     e3e:	3f 93       	push	r19
     e40:	4f 93       	push	r20
     e42:	5f 93       	push	r21
     e44:	6f 93       	push	r22
     e46:	7f 93       	push	r23
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	af 93       	push	r26
     e4e:	bf 93       	push	r27
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     e54:	e0 91 18 22 	lds	r30, 0x2218	; 0x802218 <tc_tcc0_ccc_callback>
     e58:	f0 91 19 22 	lds	r31, 0x2219	; 0x802219 <tc_tcc0_ccc_callback+0x1>
     e5c:	30 97       	sbiw	r30, 0x00	; 0
     e5e:	09 f0       	breq	.+2      	; 0xe62 <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     e60:	19 95       	eicall
	}
}
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	bf 91       	pop	r27
     e68:	af 91       	pop	r26
     e6a:	9f 91       	pop	r25
     e6c:	8f 91       	pop	r24
     e6e:	7f 91       	pop	r23
     e70:	6f 91       	pop	r22
     e72:	5f 91       	pop	r21
     e74:	4f 91       	pop	r20
     e76:	3f 91       	pop	r19
     e78:	2f 91       	pop	r18
     e7a:	0f 90       	pop	r0
     e7c:	0b be       	out	0x3b, r0	; 59
     e7e:	0f 90       	pop	r0
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	0f 90       	pop	r0
     e84:	1f 90       	pop	r1
     e86:	18 95       	reti

00000e88 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	0b b6       	in	r0, 0x3b	; 59
     e94:	0f 92       	push	r0
     e96:	2f 93       	push	r18
     e98:	3f 93       	push	r19
     e9a:	4f 93       	push	r20
     e9c:	5f 93       	push	r21
     e9e:	6f 93       	push	r22
     ea0:	7f 93       	push	r23
     ea2:	8f 93       	push	r24
     ea4:	9f 93       	push	r25
     ea6:	af 93       	push	r26
     ea8:	bf 93       	push	r27
     eaa:	ef 93       	push	r30
     eac:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     eae:	e0 91 16 22 	lds	r30, 0x2216	; 0x802216 <tc_tcc0_ccd_callback>
     eb2:	f0 91 17 22 	lds	r31, 0x2217	; 0x802217 <tc_tcc0_ccd_callback+0x1>
     eb6:	30 97       	sbiw	r30, 0x00	; 0
     eb8:	09 f0       	breq	.+2      	; 0xebc <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     eba:	19 95       	eicall
	}
}
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0b be       	out	0x3b, r0	; 59
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	0b b6       	in	r0, 0x3b	; 59
     eee:	0f 92       	push	r0
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	4f 93       	push	r20
     ef6:	5f 93       	push	r21
     ef8:	6f 93       	push	r22
     efa:	7f 93       	push	r23
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
     f00:	af 93       	push	r26
     f02:	bf 93       	push	r27
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     f08:	e0 91 14 22 	lds	r30, 0x2214	; 0x802214 <tc_tcc1_ovf_callback>
     f0c:	f0 91 15 22 	lds	r31, 0x2215	; 0x802215 <tc_tcc1_ovf_callback+0x1>
     f10:	30 97       	sbiw	r30, 0x00	; 0
     f12:	09 f0       	breq	.+2      	; 0xf16 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     f14:	19 95       	eicall
	}
}
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	7f 91       	pop	r23
     f24:	6f 91       	pop	r22
     f26:	5f 91       	pop	r21
     f28:	4f 91       	pop	r20
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	0f 90       	pop	r0
     f30:	0b be       	out	0x3b, r0	; 59
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	0b b6       	in	r0, 0x3b	; 59
     f48:	0f 92       	push	r0
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     f62:	e0 91 12 22 	lds	r30, 0x2212	; 0x802212 <tc_tcc1_err_callback>
     f66:	f0 91 13 22 	lds	r31, 0x2213	; 0x802213 <tc_tcc1_err_callback+0x1>
     f6a:	30 97       	sbiw	r30, 0x00	; 0
     f6c:	09 f0       	breq	.+2      	; 0xf70 <__vector_21+0x34>
		tc_tcc1_err_callback();
     f6e:	19 95       	eicall
	}
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	0b b6       	in	r0, 0x3b	; 59
     fa2:	0f 92       	push	r0
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     fbc:	e0 91 10 22 	lds	r30, 0x2210	; 0x802210 <tc_tcc1_cca_callback>
     fc0:	f0 91 11 22 	lds	r31, 0x2211	; 0x802211 <tc_tcc1_cca_callback+0x1>
     fc4:	30 97       	sbiw	r30, 0x00	; 0
     fc6:	09 f0       	breq	.+2      	; 0xfca <__vector_22+0x34>
		tc_tcc1_cca_callback();
     fc8:	19 95       	eicall
	}
}
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	0f 90       	pop	r0
     fe4:	0b be       	out	0x3b, r0	; 59
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	0b b6       	in	r0, 0x3b	; 59
     ffc:	0f 92       	push	r0
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1016:	e0 91 0e 22 	lds	r30, 0x220E	; 0x80220e <tc_tcc1_ccb_callback>
    101a:	f0 91 0f 22 	lds	r31, 0x220F	; 0x80220f <tc_tcc1_ccb_callback+0x1>
    101e:	30 97       	sbiw	r30, 0x00	; 0
    1020:	09 f0       	breq	.+2      	; 0x1024 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    1022:	19 95       	eicall
	}
}
    1024:	ff 91       	pop	r31
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0b be       	out	0x3b, r0	; 59
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	0b b6       	in	r0, 0x3b	; 59
    1056:	0f 92       	push	r0
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1070:	e0 91 0c 22 	lds	r30, 0x220C	; 0x80220c <tc_tcd0_ovf_callback>
    1074:	f0 91 0d 22 	lds	r31, 0x220D	; 0x80220d <tc_tcd0_ovf_callback+0x1>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	09 f0       	breq	.+2      	; 0x107e <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    107c:	19 95       	eicall
	}
}
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0b be       	out	0x3b, r0	; 59
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	0b b6       	in	r0, 0x3b	; 59
    10b0:	0f 92       	push	r0
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    10ca:	e0 91 0a 22 	lds	r30, 0x220A	; 0x80220a <tc_tcd0_err_callback>
    10ce:	f0 91 0b 22 	lds	r31, 0x220B	; 0x80220b <tc_tcd0_err_callback+0x1>
    10d2:	30 97       	sbiw	r30, 0x00	; 0
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__vector_78+0x34>
		tc_tcd0_err_callback();
    10d6:	19 95       	eicall
	}
}
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0b be       	out	0x3b, r0	; 59
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	0b b6       	in	r0, 0x3b	; 59
    110a:	0f 92       	push	r0
    110c:	2f 93       	push	r18
    110e:	3f 93       	push	r19
    1110:	4f 93       	push	r20
    1112:	5f 93       	push	r21
    1114:	6f 93       	push	r22
    1116:	7f 93       	push	r23
    1118:	8f 93       	push	r24
    111a:	9f 93       	push	r25
    111c:	af 93       	push	r26
    111e:	bf 93       	push	r27
    1120:	ef 93       	push	r30
    1122:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1124:	e0 91 08 22 	lds	r30, 0x2208	; 0x802208 <tc_tcd0_cca_callback>
    1128:	f0 91 09 22 	lds	r31, 0x2209	; 0x802209 <tc_tcd0_cca_callback+0x1>
    112c:	30 97       	sbiw	r30, 0x00	; 0
    112e:	09 f0       	breq	.+2      	; 0x1132 <__vector_79+0x34>
		tc_tcd0_cca_callback();
    1130:	19 95       	eicall
	}
}
    1132:	ff 91       	pop	r31
    1134:	ef 91       	pop	r30
    1136:	bf 91       	pop	r27
    1138:	af 91       	pop	r26
    113a:	9f 91       	pop	r25
    113c:	8f 91       	pop	r24
    113e:	7f 91       	pop	r23
    1140:	6f 91       	pop	r22
    1142:	5f 91       	pop	r21
    1144:	4f 91       	pop	r20
    1146:	3f 91       	pop	r19
    1148:	2f 91       	pop	r18
    114a:	0f 90       	pop	r0
    114c:	0b be       	out	0x3b, r0	; 59
    114e:	0f 90       	pop	r0
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	0f 90       	pop	r0
    1154:	1f 90       	pop	r1
    1156:	18 95       	reti

00001158 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	0b b6       	in	r0, 0x3b	; 59
    1164:	0f 92       	push	r0
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    117e:	e0 91 06 22 	lds	r30, 0x2206	; 0x802206 <tc_tcd0_ccb_callback>
    1182:	f0 91 07 22 	lds	r31, 0x2207	; 0x802207 <tc_tcd0_ccb_callback+0x1>
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	09 f0       	breq	.+2      	; 0x118c <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    118a:	19 95       	eicall
	}
}
    118c:	ff 91       	pop	r31
    118e:	ef 91       	pop	r30
    1190:	bf 91       	pop	r27
    1192:	af 91       	pop	r26
    1194:	9f 91       	pop	r25
    1196:	8f 91       	pop	r24
    1198:	7f 91       	pop	r23
    119a:	6f 91       	pop	r22
    119c:	5f 91       	pop	r21
    119e:	4f 91       	pop	r20
    11a0:	3f 91       	pop	r19
    11a2:	2f 91       	pop	r18
    11a4:	0f 90       	pop	r0
    11a6:	0b be       	out	0x3b, r0	; 59
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	0b b6       	in	r0, 0x3b	; 59
    11be:	0f 92       	push	r0
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    11d8:	e0 91 04 22 	lds	r30, 0x2204	; 0x802204 <tc_tcd0_ccc_callback>
    11dc:	f0 91 05 22 	lds	r31, 0x2205	; 0x802205 <tc_tcd0_ccc_callback+0x1>
    11e0:	30 97       	sbiw	r30, 0x00	; 0
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    11e4:	19 95       	eicall
	}
}
    11e6:	ff 91       	pop	r31
    11e8:	ef 91       	pop	r30
    11ea:	bf 91       	pop	r27
    11ec:	af 91       	pop	r26
    11ee:	9f 91       	pop	r25
    11f0:	8f 91       	pop	r24
    11f2:	7f 91       	pop	r23
    11f4:	6f 91       	pop	r22
    11f6:	5f 91       	pop	r21
    11f8:	4f 91       	pop	r20
    11fa:	3f 91       	pop	r19
    11fc:	2f 91       	pop	r18
    11fe:	0f 90       	pop	r0
    1200:	0b be       	out	0x3b, r0	; 59
    1202:	0f 90       	pop	r0
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	0f 90       	pop	r0
    1208:	1f 90       	pop	r1
    120a:	18 95       	reti

0000120c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    120c:	1f 92       	push	r1
    120e:	0f 92       	push	r0
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	0f 92       	push	r0
    1214:	11 24       	eor	r1, r1
    1216:	0b b6       	in	r0, 0x3b	; 59
    1218:	0f 92       	push	r0
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	4f 93       	push	r20
    1220:	5f 93       	push	r21
    1222:	6f 93       	push	r22
    1224:	7f 93       	push	r23
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
    122e:	ef 93       	push	r30
    1230:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1232:	e0 91 02 22 	lds	r30, 0x2202	; 0x802202 <tc_tcd0_ccd_callback>
    1236:	f0 91 03 22 	lds	r31, 0x2203	; 0x802203 <tc_tcd0_ccd_callback+0x1>
    123a:	30 97       	sbiw	r30, 0x00	; 0
    123c:	09 f0       	breq	.+2      	; 0x1240 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    123e:	19 95       	eicall
	}
}
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0b be       	out	0x3b, r0	; 59
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	0f 90       	pop	r0
    1262:	1f 90       	pop	r1
    1264:	18 95       	reti

00001266 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	0b b6       	in	r0, 0x3b	; 59
    1272:	0f 92       	push	r0
    1274:	2f 93       	push	r18
    1276:	3f 93       	push	r19
    1278:	4f 93       	push	r20
    127a:	5f 93       	push	r21
    127c:	6f 93       	push	r22
    127e:	7f 93       	push	r23
    1280:	8f 93       	push	r24
    1282:	9f 93       	push	r25
    1284:	af 93       	push	r26
    1286:	bf 93       	push	r27
    1288:	ef 93       	push	r30
    128a:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    128c:	e0 91 00 22 	lds	r30, 0x2200	; 0x802200 <tc_tcd1_ovf_callback>
    1290:	f0 91 01 22 	lds	r31, 0x2201	; 0x802201 <tc_tcd1_ovf_callback+0x1>
    1294:	30 97       	sbiw	r30, 0x00	; 0
    1296:	09 f0       	breq	.+2      	; 0x129a <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1298:	19 95       	eicall
	}
}
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	7f 91       	pop	r23
    12a8:	6f 91       	pop	r22
    12aa:	5f 91       	pop	r21
    12ac:	4f 91       	pop	r20
    12ae:	3f 91       	pop	r19
    12b0:	2f 91       	pop	r18
    12b2:	0f 90       	pop	r0
    12b4:	0b be       	out	0x3b, r0	; 59
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	0f 90       	pop	r0
    12bc:	1f 90       	pop	r1
    12be:	18 95       	reti

000012c0 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    12c0:	1f 92       	push	r1
    12c2:	0f 92       	push	r0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	0f 92       	push	r0
    12c8:	11 24       	eor	r1, r1
    12ca:	0b b6       	in	r0, 0x3b	; 59
    12cc:	0f 92       	push	r0
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    12e6:	e0 91 fe 21 	lds	r30, 0x21FE	; 0x8021fe <tc_tcd1_err_callback>
    12ea:	f0 91 ff 21 	lds	r31, 0x21FF	; 0x8021ff <tc_tcd1_err_callback+0x1>
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__vector_84+0x34>
		tc_tcd1_err_callback();
    12f2:	19 95       	eicall
	}
}
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0b be       	out	0x3b, r0	; 59
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1340:	e0 91 fc 21 	lds	r30, 0x21FC	; 0x8021fc <tc_tcd1_cca_callback>
    1344:	f0 91 fd 21 	lds	r31, 0x21FD	; 0x8021fd <tc_tcd1_cca_callback+0x1>
    1348:	30 97       	sbiw	r30, 0x00	; 0
    134a:	09 f0       	breq	.+2      	; 0x134e <__vector_85+0x34>
		tc_tcd1_cca_callback();
    134c:	19 95       	eicall
	}
}
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	bf 91       	pop	r27
    1354:	af 91       	pop	r26
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	7f 91       	pop	r23
    135c:	6f 91       	pop	r22
    135e:	5f 91       	pop	r21
    1360:	4f 91       	pop	r20
    1362:	3f 91       	pop	r19
    1364:	2f 91       	pop	r18
    1366:	0f 90       	pop	r0
    1368:	0b be       	out	0x3b, r0	; 59
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	0b b6       	in	r0, 0x3b	; 59
    1380:	0f 92       	push	r0
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    139a:	e0 91 fa 21 	lds	r30, 0x21FA	; 0x8021fa <tc_tcd1_ccb_callback>
    139e:	f0 91 fb 21 	lds	r31, 0x21FB	; 0x8021fb <tc_tcd1_ccb_callback+0x1>
    13a2:	30 97       	sbiw	r30, 0x00	; 0
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    13a6:	19 95       	eicall
	}
}
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	bf 91       	pop	r27
    13ae:	af 91       	pop	r26
    13b0:	9f 91       	pop	r25
    13b2:	8f 91       	pop	r24
    13b4:	7f 91       	pop	r23
    13b6:	6f 91       	pop	r22
    13b8:	5f 91       	pop	r21
    13ba:	4f 91       	pop	r20
    13bc:	3f 91       	pop	r19
    13be:	2f 91       	pop	r18
    13c0:	0f 90       	pop	r0
    13c2:	0b be       	out	0x3b, r0	; 59
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	0b b6       	in	r0, 0x3b	; 59
    13da:	0f 92       	push	r0
    13dc:	2f 93       	push	r18
    13de:	3f 93       	push	r19
    13e0:	4f 93       	push	r20
    13e2:	5f 93       	push	r21
    13e4:	6f 93       	push	r22
    13e6:	7f 93       	push	r23
    13e8:	8f 93       	push	r24
    13ea:	9f 93       	push	r25
    13ec:	af 93       	push	r26
    13ee:	bf 93       	push	r27
    13f0:	ef 93       	push	r30
    13f2:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    13f4:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <tc_tce0_ovf_callback>
    13f8:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <tc_tce0_ovf_callback+0x1>
    13fc:	30 97       	sbiw	r30, 0x00	; 0
    13fe:	09 f0       	breq	.+2      	; 0x1402 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    1400:	19 95       	eicall
	}
}
    1402:	ff 91       	pop	r31
    1404:	ef 91       	pop	r30
    1406:	bf 91       	pop	r27
    1408:	af 91       	pop	r26
    140a:	9f 91       	pop	r25
    140c:	8f 91       	pop	r24
    140e:	7f 91       	pop	r23
    1410:	6f 91       	pop	r22
    1412:	5f 91       	pop	r21
    1414:	4f 91       	pop	r20
    1416:	3f 91       	pop	r19
    1418:	2f 91       	pop	r18
    141a:	0f 90       	pop	r0
    141c:	0b be       	out	0x3b, r0	; 59
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	0b b6       	in	r0, 0x3b	; 59
    1434:	0f 92       	push	r0
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	4f 93       	push	r20
    143c:	5f 93       	push	r21
    143e:	6f 93       	push	r22
    1440:	7f 93       	push	r23
    1442:	8f 93       	push	r24
    1444:	9f 93       	push	r25
    1446:	af 93       	push	r26
    1448:	bf 93       	push	r27
    144a:	ef 93       	push	r30
    144c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    144e:	e0 91 f6 21 	lds	r30, 0x21F6	; 0x8021f6 <tc_tce0_err_callback>
    1452:	f0 91 f7 21 	lds	r31, 0x21F7	; 0x8021f7 <tc_tce0_err_callback+0x1>
    1456:	30 97       	sbiw	r30, 0x00	; 0
    1458:	09 f0       	breq	.+2      	; 0x145c <__vector_48+0x34>
		tc_tce0_err_callback();
    145a:	19 95       	eicall
	}
}
    145c:	ff 91       	pop	r31
    145e:	ef 91       	pop	r30
    1460:	bf 91       	pop	r27
    1462:	af 91       	pop	r26
    1464:	9f 91       	pop	r25
    1466:	8f 91       	pop	r24
    1468:	7f 91       	pop	r23
    146a:	6f 91       	pop	r22
    146c:	5f 91       	pop	r21
    146e:	4f 91       	pop	r20
    1470:	3f 91       	pop	r19
    1472:	2f 91       	pop	r18
    1474:	0f 90       	pop	r0
    1476:	0b be       	out	0x3b, r0	; 59
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	0f 90       	pop	r0
    147e:	1f 90       	pop	r1
    1480:	18 95       	reti

00001482 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1482:	1f 92       	push	r1
    1484:	0f 92       	push	r0
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	0f 92       	push	r0
    148a:	11 24       	eor	r1, r1
    148c:	0b b6       	in	r0, 0x3b	; 59
    148e:	0f 92       	push	r0
    1490:	2f 93       	push	r18
    1492:	3f 93       	push	r19
    1494:	4f 93       	push	r20
    1496:	5f 93       	push	r21
    1498:	6f 93       	push	r22
    149a:	7f 93       	push	r23
    149c:	8f 93       	push	r24
    149e:	9f 93       	push	r25
    14a0:	af 93       	push	r26
    14a2:	bf 93       	push	r27
    14a4:	ef 93       	push	r30
    14a6:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    14a8:	e0 91 f4 21 	lds	r30, 0x21F4	; 0x8021f4 <tc_tce0_cca_callback>
    14ac:	f0 91 f5 21 	lds	r31, 0x21F5	; 0x8021f5 <tc_tce0_cca_callback+0x1>
    14b0:	30 97       	sbiw	r30, 0x00	; 0
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <__vector_49+0x34>
		tc_tce0_cca_callback();
    14b4:	19 95       	eicall
	}
}
    14b6:	ff 91       	pop	r31
    14b8:	ef 91       	pop	r30
    14ba:	bf 91       	pop	r27
    14bc:	af 91       	pop	r26
    14be:	9f 91       	pop	r25
    14c0:	8f 91       	pop	r24
    14c2:	7f 91       	pop	r23
    14c4:	6f 91       	pop	r22
    14c6:	5f 91       	pop	r21
    14c8:	4f 91       	pop	r20
    14ca:	3f 91       	pop	r19
    14cc:	2f 91       	pop	r18
    14ce:	0f 90       	pop	r0
    14d0:	0b be       	out	0x3b, r0	; 59
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	0b b6       	in	r0, 0x3b	; 59
    14e8:	0f 92       	push	r0
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1502:	e0 91 f2 21 	lds	r30, 0x21F2	; 0x8021f2 <tc_tce0_ccb_callback>
    1506:	f0 91 f3 21 	lds	r31, 0x21F3	; 0x8021f3 <tc_tce0_ccb_callback+0x1>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    150e:	19 95       	eicall
	}
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	0b b6       	in	r0, 0x3b	; 59
    1542:	0f 92       	push	r0
    1544:	2f 93       	push	r18
    1546:	3f 93       	push	r19
    1548:	4f 93       	push	r20
    154a:	5f 93       	push	r21
    154c:	6f 93       	push	r22
    154e:	7f 93       	push	r23
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	af 93       	push	r26
    1556:	bf 93       	push	r27
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    155c:	e0 91 f0 21 	lds	r30, 0x21F0	; 0x8021f0 <tc_tce0_ccc_callback>
    1560:	f0 91 f1 21 	lds	r31, 0x21F1	; 0x8021f1 <tc_tce0_ccc_callback+0x1>
    1564:	30 97       	sbiw	r30, 0x00	; 0
    1566:	09 f0       	breq	.+2      	; 0x156a <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1568:	19 95       	eicall
	}
}
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0b be       	out	0x3b, r0	; 59
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	0b b6       	in	r0, 0x3b	; 59
    159c:	0f 92       	push	r0
    159e:	2f 93       	push	r18
    15a0:	3f 93       	push	r19
    15a2:	4f 93       	push	r20
    15a4:	5f 93       	push	r21
    15a6:	6f 93       	push	r22
    15a8:	7f 93       	push	r23
    15aa:	8f 93       	push	r24
    15ac:	9f 93       	push	r25
    15ae:	af 93       	push	r26
    15b0:	bf 93       	push	r27
    15b2:	ef 93       	push	r30
    15b4:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    15b6:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <tc_tce0_ccd_callback>
    15ba:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <tc_tce0_ccd_callback+0x1>
    15be:	30 97       	sbiw	r30, 0x00	; 0
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    15c2:	19 95       	eicall
	}
}
    15c4:	ff 91       	pop	r31
    15c6:	ef 91       	pop	r30
    15c8:	bf 91       	pop	r27
    15ca:	af 91       	pop	r26
    15cc:	9f 91       	pop	r25
    15ce:	8f 91       	pop	r24
    15d0:	7f 91       	pop	r23
    15d2:	6f 91       	pop	r22
    15d4:	5f 91       	pop	r21
    15d6:	4f 91       	pop	r20
    15d8:	3f 91       	pop	r19
    15da:	2f 91       	pop	r18
    15dc:	0f 90       	pop	r0
    15de:	0b be       	out	0x3b, r0	; 59
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    15ea:	1f 92       	push	r1
    15ec:	0f 92       	push	r0
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	0f 92       	push	r0
    15f2:	11 24       	eor	r1, r1
    15f4:	0b b6       	in	r0, 0x3b	; 59
    15f6:	0f 92       	push	r0
    15f8:	2f 93       	push	r18
    15fa:	3f 93       	push	r19
    15fc:	4f 93       	push	r20
    15fe:	5f 93       	push	r21
    1600:	6f 93       	push	r22
    1602:	7f 93       	push	r23
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1610:	e0 91 ec 21 	lds	r30, 0x21EC	; 0x8021ec <tc_tce1_ovf_callback>
    1614:	f0 91 ed 21 	lds	r31, 0x21ED	; 0x8021ed <tc_tce1_ovf_callback+0x1>
    1618:	30 97       	sbiw	r30, 0x00	; 0
    161a:	09 f0       	breq	.+2      	; 0x161e <__vector_53+0x34>
		tc_tce1_ovf_callback();
    161c:	19 95       	eicall
	}
}
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0b be       	out	0x3b, r0	; 59
    163a:	0f 90       	pop	r0
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	0f 90       	pop	r0
    1640:	1f 90       	pop	r1
    1642:	18 95       	reti

00001644 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1644:	1f 92       	push	r1
    1646:	0f 92       	push	r0
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	0f 92       	push	r0
    164c:	11 24       	eor	r1, r1
    164e:	0b b6       	in	r0, 0x3b	; 59
    1650:	0f 92       	push	r0
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    166a:	e0 91 ea 21 	lds	r30, 0x21EA	; 0x8021ea <tc_tce1_err_callback>
    166e:	f0 91 eb 21 	lds	r31, 0x21EB	; 0x8021eb <tc_tce1_err_callback+0x1>
    1672:	30 97       	sbiw	r30, 0x00	; 0
    1674:	09 f0       	breq	.+2      	; 0x1678 <__vector_54+0x34>
		tc_tce1_err_callback();
    1676:	19 95       	eicall
	}
}
    1678:	ff 91       	pop	r31
    167a:	ef 91       	pop	r30
    167c:	bf 91       	pop	r27
    167e:	af 91       	pop	r26
    1680:	9f 91       	pop	r25
    1682:	8f 91       	pop	r24
    1684:	7f 91       	pop	r23
    1686:	6f 91       	pop	r22
    1688:	5f 91       	pop	r21
    168a:	4f 91       	pop	r20
    168c:	3f 91       	pop	r19
    168e:	2f 91       	pop	r18
    1690:	0f 90       	pop	r0
    1692:	0b be       	out	0x3b, r0	; 59
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	0b b6       	in	r0, 0x3b	; 59
    16aa:	0f 92       	push	r0
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    16c4:	e0 91 e8 21 	lds	r30, 0x21E8	; 0x8021e8 <tc_tce1_cca_callback>
    16c8:	f0 91 e9 21 	lds	r31, 0x21E9	; 0x8021e9 <tc_tce1_cca_callback+0x1>
    16cc:	30 97       	sbiw	r30, 0x00	; 0
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <__vector_55+0x34>
		tc_tce1_cca_callback();
    16d0:	19 95       	eicall
	}
}
    16d2:	ff 91       	pop	r31
    16d4:	ef 91       	pop	r30
    16d6:	bf 91       	pop	r27
    16d8:	af 91       	pop	r26
    16da:	9f 91       	pop	r25
    16dc:	8f 91       	pop	r24
    16de:	7f 91       	pop	r23
    16e0:	6f 91       	pop	r22
    16e2:	5f 91       	pop	r21
    16e4:	4f 91       	pop	r20
    16e6:	3f 91       	pop	r19
    16e8:	2f 91       	pop	r18
    16ea:	0f 90       	pop	r0
    16ec:	0b be       	out	0x3b, r0	; 59
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    16f8:	1f 92       	push	r1
    16fa:	0f 92       	push	r0
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	0f 92       	push	r0
    1700:	11 24       	eor	r1, r1
    1702:	0b b6       	in	r0, 0x3b	; 59
    1704:	0f 92       	push	r0
    1706:	2f 93       	push	r18
    1708:	3f 93       	push	r19
    170a:	4f 93       	push	r20
    170c:	5f 93       	push	r21
    170e:	6f 93       	push	r22
    1710:	7f 93       	push	r23
    1712:	8f 93       	push	r24
    1714:	9f 93       	push	r25
    1716:	af 93       	push	r26
    1718:	bf 93       	push	r27
    171a:	ef 93       	push	r30
    171c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    171e:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <tc_tce1_ccb_callback>
    1722:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <tc_tce1_ccb_callback+0x1>
    1726:	30 97       	sbiw	r30, 0x00	; 0
    1728:	09 f0       	breq	.+2      	; 0x172c <__vector_56+0x34>
		tc_tce1_ccb_callback();
    172a:	19 95       	eicall
	}
}
    172c:	ff 91       	pop	r31
    172e:	ef 91       	pop	r30
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0b be       	out	0x3b, r0	; 59
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	0b b6       	in	r0, 0x3b	; 59
    175e:	0f 92       	push	r0
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1778:	e0 91 e4 21 	lds	r30, 0x21E4	; 0x8021e4 <tc_tcf0_ovf_callback>
    177c:	f0 91 e5 21 	lds	r31, 0x21E5	; 0x8021e5 <tc_tcf0_ovf_callback+0x1>
    1780:	30 97       	sbiw	r30, 0x00	; 0
    1782:	09 f0       	breq	.+2      	; 0x1786 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1784:	19 95       	eicall
	}
}
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	bf 91       	pop	r27
    178c:	af 91       	pop	r26
    178e:	9f 91       	pop	r25
    1790:	8f 91       	pop	r24
    1792:	7f 91       	pop	r23
    1794:	6f 91       	pop	r22
    1796:	5f 91       	pop	r21
    1798:	4f 91       	pop	r20
    179a:	3f 91       	pop	r19
    179c:	2f 91       	pop	r18
    179e:	0f 90       	pop	r0
    17a0:	0b be       	out	0x3b, r0	; 59
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    17ac:	1f 92       	push	r1
    17ae:	0f 92       	push	r0
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	0f 92       	push	r0
    17b4:	11 24       	eor	r1, r1
    17b6:	0b b6       	in	r0, 0x3b	; 59
    17b8:	0f 92       	push	r0
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	4f 93       	push	r20
    17c0:	5f 93       	push	r21
    17c2:	6f 93       	push	r22
    17c4:	7f 93       	push	r23
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    17d2:	e0 91 e2 21 	lds	r30, 0x21E2	; 0x8021e2 <tc_tcf0_err_callback>
    17d6:	f0 91 e3 21 	lds	r31, 0x21E3	; 0x8021e3 <tc_tcf0_err_callback+0x1>
    17da:	30 97       	sbiw	r30, 0x00	; 0
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <__vector_109+0x34>
		tc_tcf0_err_callback();
    17de:	19 95       	eicall
	}
}
    17e0:	ff 91       	pop	r31
    17e2:	ef 91       	pop	r30
    17e4:	bf 91       	pop	r27
    17e6:	af 91       	pop	r26
    17e8:	9f 91       	pop	r25
    17ea:	8f 91       	pop	r24
    17ec:	7f 91       	pop	r23
    17ee:	6f 91       	pop	r22
    17f0:	5f 91       	pop	r21
    17f2:	4f 91       	pop	r20
    17f4:	3f 91       	pop	r19
    17f6:	2f 91       	pop	r18
    17f8:	0f 90       	pop	r0
    17fa:	0b be       	out	0x3b, r0	; 59
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	0b b6       	in	r0, 0x3b	; 59
    1812:	0f 92       	push	r0
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    182c:	e0 91 e0 21 	lds	r30, 0x21E0	; 0x8021e0 <tc_tcf0_cca_callback>
    1830:	f0 91 e1 21 	lds	r31, 0x21E1	; 0x8021e1 <tc_tcf0_cca_callback+0x1>
    1834:	30 97       	sbiw	r30, 0x00	; 0
    1836:	09 f0       	breq	.+2      	; 0x183a <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1838:	19 95       	eicall
	}
}
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0b be       	out	0x3b, r0	; 59
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	0f 90       	pop	r0
    185c:	1f 90       	pop	r1
    185e:	18 95       	reti

00001860 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	0b b6       	in	r0, 0x3b	; 59
    186c:	0f 92       	push	r0
    186e:	2f 93       	push	r18
    1870:	3f 93       	push	r19
    1872:	4f 93       	push	r20
    1874:	5f 93       	push	r21
    1876:	6f 93       	push	r22
    1878:	7f 93       	push	r23
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	af 93       	push	r26
    1880:	bf 93       	push	r27
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1886:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <tc_tcf0_ccb_callback>
    188a:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <tc_tcf0_ccb_callback+0x1>
    188e:	30 97       	sbiw	r30, 0x00	; 0
    1890:	09 f0       	breq	.+2      	; 0x1894 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1892:	19 95       	eicall
	}
}
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	0b be       	out	0x3b, r0	; 59
    18b0:	0f 90       	pop	r0
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	0f 90       	pop	r0
    18b6:	1f 90       	pop	r1
    18b8:	18 95       	reti

000018ba <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	0b b6       	in	r0, 0x3b	; 59
    18c6:	0f 92       	push	r0
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    18e0:	e0 91 dc 21 	lds	r30, 0x21DC	; 0x8021dc <tc_tcf0_ccc_callback>
    18e4:	f0 91 dd 21 	lds	r31, 0x21DD	; 0x8021dd <tc_tcf0_ccc_callback+0x1>
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	09 f0       	breq	.+2      	; 0x18ee <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    18ec:	19 95       	eicall
	}
}
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0b be       	out	0x3b, r0	; 59
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1914:	1f 92       	push	r1
    1916:	0f 92       	push	r0
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	0f 92       	push	r0
    191c:	11 24       	eor	r1, r1
    191e:	0b b6       	in	r0, 0x3b	; 59
    1920:	0f 92       	push	r0
    1922:	2f 93       	push	r18
    1924:	3f 93       	push	r19
    1926:	4f 93       	push	r20
    1928:	5f 93       	push	r21
    192a:	6f 93       	push	r22
    192c:	7f 93       	push	r23
    192e:	8f 93       	push	r24
    1930:	9f 93       	push	r25
    1932:	af 93       	push	r26
    1934:	bf 93       	push	r27
    1936:	ef 93       	push	r30
    1938:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    193a:	e0 91 da 21 	lds	r30, 0x21DA	; 0x8021da <tc_tcf0_ccd_callback>
    193e:	f0 91 db 21 	lds	r31, 0x21DB	; 0x8021db <tc_tcf0_ccd_callback+0x1>
    1942:	30 97       	sbiw	r30, 0x00	; 0
    1944:	09 f0       	breq	.+2      	; 0x1948 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1946:	19 95       	eicall
	}
}
    1948:	ff 91       	pop	r31
    194a:	ef 91       	pop	r30
    194c:	bf 91       	pop	r27
    194e:	af 91       	pop	r26
    1950:	9f 91       	pop	r25
    1952:	8f 91       	pop	r24
    1954:	7f 91       	pop	r23
    1956:	6f 91       	pop	r22
    1958:	5f 91       	pop	r21
    195a:	4f 91       	pop	r20
    195c:	3f 91       	pop	r19
    195e:	2f 91       	pop	r18
    1960:	0f 90       	pop	r0
    1962:	0b be       	out	0x3b, r0	; 59
    1964:	0f 90       	pop	r0
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	0f 90       	pop	r0
    196a:	1f 90       	pop	r1
    196c:	18 95       	reti

0000196e <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	1f 92       	push	r1
    1976:	1f 92       	push	r1
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    197c:	2f b7       	in	r18, 0x3f	; 63
    197e:	2a 83       	std	Y+2, r18	; 0x02
	cpu_irq_disable();
    1980:	f8 94       	cli
	return flags;
    1982:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1984:	28 2f       	mov	r18, r24
    1986:	39 2f       	mov	r19, r25
    1988:	21 15       	cp	r18, r1
    198a:	88 e0       	ldi	r24, 0x08	; 8
    198c:	38 07       	cpc	r19, r24
    198e:	39 f4       	brne	.+14     	; 0x199e <tc_enable+0x30>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	53 d5       	rcall	.+2726   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1996:	64 e0       	ldi	r22, 0x04	; 4
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	50 d5       	rcall	.+2720   	; 0x243c <sysclk_enable_module>
    199c:	43 c0       	rjmp	.+134    	; 0x1a24 <tc_enable+0xb6>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    199e:	20 34       	cpi	r18, 0x40	; 64
    19a0:	88 e0       	ldi	r24, 0x08	; 8
    19a2:	38 07       	cpc	r19, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    19a4:	39 f4       	brne	.+14     	; 0x19b4 <tc_enable+0x46>
    19a6:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    19a8:	83 e0       	ldi	r24, 0x03	; 3
    19aa:	48 d5       	rcall	.+2704   	; 0x243c <sysclk_enable_module>
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	83 e0       	ldi	r24, 0x03	; 3
    19b0:	45 d5       	rcall	.+2698   	; 0x243c <sysclk_enable_module>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    19b2:	38 c0       	rjmp	.+112    	; 0x1a24 <tc_enable+0xb6>
    19b4:	21 15       	cp	r18, r1
    19b6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    19b8:	38 07       	cpc	r19, r24
    19ba:	39 f4       	brne	.+14     	; 0x19ca <tc_enable+0x5c>
    19bc:	61 e0       	ldi	r22, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	3d d5       	rcall	.+2682   	; 0x243c <sysclk_enable_module>
    19c2:	64 e0       	ldi	r22, 0x04	; 4
    19c4:	84 e0       	ldi	r24, 0x04	; 4
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    19c6:	3a d5       	rcall	.+2676   	; 0x243c <sysclk_enable_module>
    19c8:	2d c0       	rjmp	.+90     	; 0x1a24 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    19ca:	20 34       	cpi	r18, 0x40	; 64
    19cc:	89 e0       	ldi	r24, 0x09	; 9
    19ce:	38 07       	cpc	r19, r24
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    19d2:	62 e0       	ldi	r22, 0x02	; 2
    19d4:	84 e0       	ldi	r24, 0x04	; 4
    19d6:	32 d5       	rcall	.+2660   	; 0x243c <sysclk_enable_module>
    19d8:	64 e0       	ldi	r22, 0x04	; 4
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	2f d5       	rcall	.+2654   	; 0x243c <sysclk_enable_module>
    19de:	22 c0       	rjmp	.+68     	; 0x1a24 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    19e0:	21 15       	cp	r18, r1
    19e2:	8a e0       	ldi	r24, 0x0A	; 10
    19e4:	38 07       	cpc	r19, r24
    19e6:	39 f4       	brne	.+14     	; 0x19f6 <tc_enable+0x88>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	85 e0       	ldi	r24, 0x05	; 5
    19ec:	27 d5       	rcall	.+2638   	; 0x243c <sysclk_enable_module>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    19ee:	64 e0       	ldi	r22, 0x04	; 4
    19f0:	85 e0       	ldi	r24, 0x05	; 5
    19f2:	24 d5       	rcall	.+2632   	; 0x243c <sysclk_enable_module>
    19f4:	17 c0       	rjmp	.+46     	; 0x1a24 <tc_enable+0xb6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    19f6:	20 34       	cpi	r18, 0x40	; 64
    19f8:	8a e0       	ldi	r24, 0x0A	; 10
    19fa:	38 07       	cpc	r19, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    19fc:	39 f4       	brne	.+14     	; 0x1a0c <tc_enable+0x9e>
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	85 e0       	ldi	r24, 0x05	; 5
    1a02:	1c d5       	rcall	.+2616   	; 0x243c <sysclk_enable_module>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1a04:	64 e0       	ldi	r22, 0x04	; 4
    1a06:	85 e0       	ldi	r24, 0x05	; 5
    1a08:	19 d5       	rcall	.+2610   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a0a:	0c c0       	rjmp	.+24     	; 0x1a24 <tc_enable+0xb6>
    1a0c:	21 15       	cp	r18, r1
    1a0e:	3b 40       	sbci	r19, 0x0B	; 11
    1a10:	39 f4       	brne	.+14     	; 0x1a20 <tc_enable+0xb2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1a12:	61 e0       	ldi	r22, 0x01	; 1
    1a14:	86 e0       	ldi	r24, 0x06	; 6
    1a16:	12 d5       	rcall	.+2596   	; 0x243c <sysclk_enable_module>
    1a18:	64 e0       	ldi	r22, 0x04	; 4
    1a1a:	86 e0       	ldi	r24, 0x06	; 6
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a1c:	0f d5       	rcall	.+2590   	; 0x243c <sysclk_enable_module>
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <tc_enable+0xb6>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1a20:	1f bf       	out	0x3f, r17	; 63
    1a22:	10 c0       	rjmp	.+32     	; 0x1a44 <tc_enable+0xd6>
    1a24:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <sleepmgr_locks+0x1>
    1a28:	8f 3f       	cpi	r24, 0xFF	; 255

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <tc_enable+0xc0>
    1a2c:	ff cf       	rjmp	.-2      	; 0x1a2c <tc_enable+0xbe>
	cpu_irq_disable();
    1a2e:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    1a30:	89 83       	std	Y+1, r24	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1a32:	f8 94       	cli
    1a34:	99 81       	ldd	r25, Y+1	; 0x01
    1a36:	e3 e2       	ldi	r30, 0x23	; 35
    1a38:	f2 e2       	ldi	r31, 0x22	; 34
    1a3a:	81 81       	ldd	r24, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a3c:	8f 5f       	subi	r24, 0xFF	; 255
    1a3e:	81 83       	std	Z+1, r24	; 0x01
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1a40:	9f bf       	out	0x3f, r25	; 63
    1a42:	1f bf       	out	0x3f, r17	; 63
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	1f 91       	pop	r17
    1a4e:	08 95       	ret

00001a50 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1a50:	fc 01       	movw	r30, r24
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	95 ff       	sbrs	r25, 5
    1a56:	fd cf       	rjmp	.-6      	; 0x1a52 <usart_putchar+0x2>
    1a58:	60 83       	st	Z, r22
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	08 95       	ret

00001a60 <usart_getchar>:
    1a60:	fc 01       	movw	r30, r24
    1a62:	91 81       	ldd	r25, Z+1	; 0x01
    1a64:	99 23       	and	r25, r25
    1a66:	ec f7       	brge	.-6      	; 0x1a62 <usart_getchar+0x2>
    1a68:	80 81       	ld	r24, Z
    1a6a:	08 95       	ret

00001a6c <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1a6c:	4f 92       	push	r4
    1a6e:	5f 92       	push	r5
    1a70:	6f 92       	push	r6
    1a72:	7f 92       	push	r7
    1a74:	8f 92       	push	r8
    1a76:	9f 92       	push	r9
    1a78:	af 92       	push	r10
    1a7a:	bf 92       	push	r11
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	7c 01       	movw	r14, r24
    1a88:	4a 01       	movw	r8, r20
    1a8a:	5b 01       	movw	r10, r22
    1a8c:	28 01       	movw	r4, r16
    1a8e:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a90:	fc 01       	movw	r30, r24
    1a92:	84 81       	ldd	r24, Z+4	; 0x04
    1a94:	82 ff       	sbrs	r24, 2
    1a96:	16 c0       	rjmp	.+44     	; 0x1ac4 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1a98:	d9 01       	movw	r26, r18
    1a9a:	c8 01       	movw	r24, r16
    1a9c:	68 94       	set
    1a9e:	12 f8       	bld	r1, 2
    1aa0:	b6 95       	lsr	r27
    1aa2:	a7 95       	ror	r26
    1aa4:	97 95       	ror	r25
    1aa6:	87 95       	ror	r24
    1aa8:	16 94       	lsr	r1
    1aaa:	d1 f7       	brne	.-12     	; 0x1aa0 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1aac:	b9 01       	movw	r22, r18
    1aae:	a8 01       	movw	r20, r16
    1ab0:	03 2e       	mov	r0, r19
    1ab2:	36 e1       	ldi	r19, 0x16	; 22
    1ab4:	76 95       	lsr	r23
    1ab6:	67 95       	ror	r22
    1ab8:	57 95       	ror	r21
    1aba:	47 95       	ror	r20
    1abc:	3a 95       	dec	r19
    1abe:	d1 f7       	brne	.-12     	; 0x1ab4 <usart_set_baudrate+0x48>
    1ac0:	30 2d       	mov	r19, r0
    1ac2:	15 c0       	rjmp	.+42     	; 0x1aee <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1ac4:	d9 01       	movw	r26, r18
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	68 94       	set
    1aca:	13 f8       	bld	r1, 3
    1acc:	b6 95       	lsr	r27
    1ace:	a7 95       	ror	r26
    1ad0:	97 95       	ror	r25
    1ad2:	87 95       	ror	r24
    1ad4:	16 94       	lsr	r1
    1ad6:	d1 f7       	brne	.-12     	; 0x1acc <usart_set_baudrate+0x60>
		min_rate /= 2;
    1ad8:	b9 01       	movw	r22, r18
    1ada:	a8 01       	movw	r20, r16
    1adc:	03 2e       	mov	r0, r19
    1ade:	37 e1       	ldi	r19, 0x17	; 23
    1ae0:	76 95       	lsr	r23
    1ae2:	67 95       	ror	r22
    1ae4:	57 95       	ror	r21
    1ae6:	47 95       	ror	r20
    1ae8:	3a 95       	dec	r19
    1aea:	d1 f7       	brne	.-12     	; 0x1ae0 <usart_set_baudrate+0x74>
    1aec:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1aee:	88 15       	cp	r24, r8
    1af0:	99 05       	cpc	r25, r9
    1af2:	aa 05       	cpc	r26, r10
    1af4:	bb 05       	cpc	r27, r11
    1af6:	08 f4       	brcc	.+2      	; 0x1afa <usart_set_baudrate+0x8e>
    1af8:	a6 c0       	rjmp	.+332    	; 0x1c46 <usart_set_baudrate+0x1da>
    1afa:	84 16       	cp	r8, r20
    1afc:	95 06       	cpc	r9, r21
    1afe:	a6 06       	cpc	r10, r22
    1b00:	b7 06       	cpc	r11, r23
    1b02:	08 f4       	brcc	.+2      	; 0x1b06 <usart_set_baudrate+0x9a>
    1b04:	a2 c0       	rjmp	.+324    	; 0x1c4a <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1b06:	f7 01       	movw	r30, r14
    1b08:	84 81       	ldd	r24, Z+4	; 0x04
    1b0a:	82 fd       	sbrc	r24, 2
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <usart_set_baudrate+0xaa>
		baud *= 2;
    1b0e:	88 0c       	add	r8, r8
    1b10:	99 1c       	adc	r9, r9
    1b12:	aa 1c       	adc	r10, r10
    1b14:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1b16:	c3 01       	movw	r24, r6
    1b18:	b2 01       	movw	r22, r4
    1b1a:	a5 01       	movw	r20, r10
    1b1c:	94 01       	movw	r18, r8
    1b1e:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1b22:	2f 3f       	cpi	r18, 0xFF	; 255
    1b24:	31 05       	cpc	r19, r1
    1b26:	41 05       	cpc	r20, r1
    1b28:	51 05       	cpc	r21, r1
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <usart_set_baudrate+0xc2>
    1b2c:	90 c0       	rjmp	.+288    	; 0x1c4e <usart_set_baudrate+0x1e2>
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a0 e0       	ldi	r26, 0x00	; 0
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	c9 ef       	ldi	r28, 0xF9	; 249
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <usart_set_baudrate+0xd8>
    1b3a:	28 17       	cp	r18, r24
    1b3c:	39 07       	cpc	r19, r25
    1b3e:	4a 07       	cpc	r20, r26
    1b40:	5b 07       	cpc	r21, r27
    1b42:	58 f0       	brcs	.+22     	; 0x1b5a <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	aa 1f       	adc	r26, r26
    1b4a:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1b4c:	cd 3f       	cpi	r28, 0xFD	; 253
    1b4e:	0c f4       	brge	.+2      	; 0x1b52 <usart_set_baudrate+0xe6>
			limit |= 1;
    1b50:	81 60       	ori	r24, 0x01	; 1
    1b52:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1b54:	c7 30       	cpi	r28, 0x07	; 7
    1b56:	89 f7       	brne	.-30     	; 0x1b3a <usart_set_baudrate+0xce>
    1b58:	4f c0       	rjmp	.+158    	; 0x1bf8 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1b5a:	cc 23       	and	r28, r28
    1b5c:	0c f0       	brlt	.+2      	; 0x1b60 <usart_set_baudrate+0xf4>
    1b5e:	4c c0       	rjmp	.+152    	; 0x1bf8 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1b60:	d5 01       	movw	r26, r10
    1b62:	c4 01       	movw	r24, r8
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	aa 1f       	adc	r26, r26
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	aa 1f       	adc	r26, r26
    1b72:	bb 1f       	adc	r27, r27
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	aa 1f       	adc	r26, r26
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	48 1a       	sub	r4, r24
    1b7e:	59 0a       	sbc	r5, r25
    1b80:	6a 0a       	sbc	r6, r26
    1b82:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1b84:	ce 3f       	cpi	r28, 0xFE	; 254
    1b86:	f4 f4       	brge	.+60     	; 0x1bc4 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1b88:	8d ef       	ldi	r24, 0xFD	; 253
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	8c 1b       	sub	r24, r28
    1b8e:	91 09       	sbc	r25, r1
    1b90:	c7 fd       	sbrc	r28, 7
    1b92:	93 95       	inc	r25
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <usart_set_baudrate+0x132>
    1b96:	44 0c       	add	r4, r4
    1b98:	55 1c       	adc	r5, r5
    1b9a:	66 1c       	adc	r6, r6
    1b9c:	77 1c       	adc	r7, r7
    1b9e:	8a 95       	dec	r24
    1ba0:	d2 f7       	brpl	.-12     	; 0x1b96 <usart_set_baudrate+0x12a>
    1ba2:	d5 01       	movw	r26, r10
    1ba4:	c4 01       	movw	r24, r8
    1ba6:	b6 95       	lsr	r27
    1ba8:	a7 95       	ror	r26
    1baa:	97 95       	ror	r25
    1bac:	87 95       	ror	r24
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	64 0d       	add	r22, r4
    1bb4:	75 1d       	adc	r23, r5
    1bb6:	86 1d       	adc	r24, r6
    1bb8:	97 1d       	adc	r25, r7
    1bba:	a5 01       	movw	r20, r10
    1bbc:	94 01       	movw	r18, r8
    1bbe:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>
    1bc2:	37 c0       	rjmp	.+110    	; 0x1c32 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	8c 0f       	add	r24, r28
    1bc8:	a5 01       	movw	r20, r10
    1bca:	94 01       	movw	r18, r8
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <usart_set_baudrate+0x16a>
    1bce:	22 0f       	add	r18, r18
    1bd0:	33 1f       	adc	r19, r19
    1bd2:	44 1f       	adc	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	8a 95       	dec	r24
    1bd8:	d2 f7       	brpl	.-12     	; 0x1bce <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1bda:	da 01       	movw	r26, r20
    1bdc:	c9 01       	movw	r24, r18
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	64 0d       	add	r22, r4
    1bec:	75 1d       	adc	r23, r5
    1bee:	86 1d       	adc	r24, r6
    1bf0:	97 1d       	adc	r25, r7
    1bf2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>
    1bf6:	1d c0       	rjmp	.+58     	; 0x1c32 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	8c 0f       	add	r24, r28
    1bfc:	a5 01       	movw	r20, r10
    1bfe:	94 01       	movw	r18, r8
    1c00:	04 c0       	rjmp	.+8      	; 0x1c0a <usart_set_baudrate+0x19e>
    1c02:	22 0f       	add	r18, r18
    1c04:	33 1f       	adc	r19, r19
    1c06:	44 1f       	adc	r20, r20
    1c08:	55 1f       	adc	r21, r21
    1c0a:	8a 95       	dec	r24
    1c0c:	d2 f7       	brpl	.-12     	; 0x1c02 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1c0e:	da 01       	movw	r26, r20
    1c10:	c9 01       	movw	r24, r18
    1c12:	b6 95       	lsr	r27
    1c14:	a7 95       	ror	r26
    1c16:	97 95       	ror	r25
    1c18:	87 95       	ror	r24
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	64 0d       	add	r22, r4
    1c20:	75 1d       	adc	r23, r5
    1c22:	86 1d       	adc	r24, r6
    1c24:	97 1d       	adc	r25, r7
    1c26:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>
    1c2a:	21 50       	subi	r18, 0x01	; 1
    1c2c:	31 09       	sbc	r19, r1
    1c2e:	41 09       	sbc	r20, r1
    1c30:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1c32:	83 2f       	mov	r24, r19
    1c34:	8f 70       	andi	r24, 0x0F	; 15
    1c36:	c2 95       	swap	r28
    1c38:	c0 7f       	andi	r28, 0xF0	; 240
    1c3a:	c8 2b       	or	r28, r24
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1c40:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	18 c0       	rjmp	.+48     	; 0x1c76 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	16 c0       	rjmp	.+44     	; 0x1c76 <usart_set_baudrate+0x20a>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	14 c0       	rjmp	.+40     	; 0x1c76 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1c4e:	d5 01       	movw	r26, r10
    1c50:	c4 01       	movw	r24, r8
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	aa 1f       	adc	r26, r26
    1c58:	bb 1f       	adc	r27, r27
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	aa 1f       	adc	r26, r26
    1c60:	bb 1f       	adc	r27, r27
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	aa 1f       	adc	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	48 1a       	sub	r4, r24
    1c6c:	59 0a       	sbc	r5, r25
    1c6e:	6a 0a       	sbc	r6, r26
    1c70:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1c72:	c9 ef       	ldi	r28, 0xF9	; 249
    1c74:	89 cf       	rjmp	.-238    	; 0x1b88 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	bf 90       	pop	r11
    1c82:	af 90       	pop	r10
    1c84:	9f 90       	pop	r9
    1c86:	8f 90       	pop	r8
    1c88:	7f 90       	pop	r7
    1c8a:	6f 90       	pop	r6
    1c8c:	5f 90       	pop	r5
    1c8e:	4f 90       	pop	r4
    1c90:	08 95       	ret

00001c92 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
    1c9c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <usart_init_rs232+0x12>
    1ca2:	e6 c0       	rjmp	.+460    	; 0x1e70 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1ca4:	80 3c       	cpi	r24, 0xC0	; 192
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1caa:	60 e1       	ldi	r22, 0x10	; 16
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	c6 d3       	rcall	.+1932   	; 0x243c <sysclk_enable_module>
    1cb0:	df c0       	rjmp	.+446    	; 0x1e70 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1cb2:	c0 38       	cpi	r28, 0x80	; 128
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	d8 07       	cpc	r29, r24
    1cb8:	21 f4       	brne	.+8      	; 0x1cc2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	be d3       	rcall	.+1916   	; 0x243c <sysclk_enable_module>
    1cc0:	d7 c0       	rjmp	.+430    	; 0x1e70 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1cc2:	c1 15       	cp	r28, r1
    1cc4:	e1 e0       	ldi	r30, 0x01	; 1
    1cc6:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <usart_init_rs232+0x40>
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	b6 d3       	rcall	.+1900   	; 0x243c <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1cd0:	cf c0       	rjmp	.+414    	; 0x1e70 <usart_init_rs232+0x1de>
    1cd2:	c0 38       	cpi	r28, 0x80	; 128
    1cd4:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1cd6:	df 07       	cpc	r29, r31
    1cd8:	21 f4       	brne	.+8      	; 0x1ce2 <usart_init_rs232+0x50>
    1cda:	61 e0       	ldi	r22, 0x01	; 1
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	ae d3       	rcall	.+1884   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1ce0:	c7 c0       	rjmp	.+398    	; 0x1e70 <usart_init_rs232+0x1de>
    1ce2:	c0 39       	cpi	r28, 0x90	; 144
    1ce4:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1ce6:	d8 07       	cpc	r29, r24
    1ce8:	21 f4       	brne	.+8      	; 0x1cf2 <usart_init_rs232+0x60>
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	a6 d3       	rcall	.+1868   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1cf0:	bf c0       	rjmp	.+382    	; 0x1e70 <usart_init_rs232+0x1de>
    1cf2:	c1 15       	cp	r28, r1
    1cf4:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1cf6:	de 07       	cpc	r29, r30
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <usart_init_rs232+0x70>
    1cfa:	62 e0       	ldi	r22, 0x02	; 2
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1cfe:	9e d3       	rcall	.+1852   	; 0x243c <sysclk_enable_module>
    1d00:	b7 c0       	rjmp	.+366    	; 0x1e70 <usart_init_rs232+0x1de>
    1d02:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1d04:	f2 e0       	ldi	r31, 0x02	; 2
    1d06:	df 07       	cpc	r29, r31
    1d08:	21 f4       	brne	.+8      	; 0x1d12 <usart_init_rs232+0x80>
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	96 d3       	rcall	.+1836   	; 0x243c <sysclk_enable_module>
    1d10:	af c0       	rjmp	.+350    	; 0x1e70 <usart_init_rs232+0x1de>
    1d12:	c0 32       	cpi	r28, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	d8 07       	cpc	r29, r24
    1d18:	21 f4       	brne	.+8      	; 0x1d22 <usart_init_rs232+0x90>
    1d1a:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	8e d3       	rcall	.+1820   	; 0x243c <sysclk_enable_module>
    1d20:	a7 c0       	rjmp	.+334    	; 0x1e70 <usart_init_rs232+0x1de>
    1d22:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1d24:	e8 e0       	ldi	r30, 0x08	; 8
    1d26:	de 07       	cpc	r29, r30
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <usart_init_rs232+0xa0>
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	86 d3       	rcall	.+1804   	; 0x243c <sysclk_enable_module>
    1d30:	9f c0       	rjmp	.+318    	; 0x1e70 <usart_init_rs232+0x1de>
    1d32:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1d34:	f9 e0       	ldi	r31, 0x09	; 9
    1d36:	df 07       	cpc	r29, r31
    1d38:	21 f4       	brne	.+8      	; 0x1d42 <usart_init_rs232+0xb0>
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	7e d3       	rcall	.+1788   	; 0x243c <sysclk_enable_module>
    1d40:	97 c0       	rjmp	.+302    	; 0x1e70 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1d42:	c1 15       	cp	r28, r1
    1d44:	8a e0       	ldi	r24, 0x0A	; 10
    1d46:	d8 07       	cpc	r29, r24
    1d48:	21 f4       	brne	.+8      	; 0x1d52 <usart_init_rs232+0xc0>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	85 e0       	ldi	r24, 0x05	; 5
    1d4e:	76 d3       	rcall	.+1772   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1d50:	8f c0       	rjmp	.+286    	; 0x1e70 <usart_init_rs232+0x1de>
    1d52:	c1 15       	cp	r28, r1
    1d54:	eb e0       	ldi	r30, 0x0B	; 11
    1d56:	de 07       	cpc	r29, r30
    1d58:	21 f4       	brne	.+8      	; 0x1d62 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	6e d3       	rcall	.+1756   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1d60:	87 c0       	rjmp	.+270    	; 0x1e70 <usart_init_rs232+0x1de>
    1d62:	c0 34       	cpi	r28, 0x40	; 64
    1d64:	f8 e0       	ldi	r31, 0x08	; 8
    1d66:	df 07       	cpc	r29, r31
    1d68:	21 f4       	brne	.+8      	; 0x1d72 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	66 d3       	rcall	.+1740   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1d70:	7f c0       	rjmp	.+254    	; 0x1e70 <usart_init_rs232+0x1de>
    1d72:	c0 34       	cpi	r28, 0x40	; 64
    1d74:	89 e0       	ldi	r24, 0x09	; 9
    1d76:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1d78:	21 f4       	brne	.+8      	; 0x1d82 <usart_init_rs232+0xf0>
    1d7a:	62 e0       	ldi	r22, 0x02	; 2
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1d7e:	5e d3       	rcall	.+1724   	; 0x243c <sysclk_enable_module>
    1d80:	77 c0       	rjmp	.+238    	; 0x1e70 <usart_init_rs232+0x1de>
    1d82:	c0 34       	cpi	r28, 0x40	; 64
    1d84:	ea e0       	ldi	r30, 0x0A	; 10
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1d86:	de 07       	cpc	r29, r30
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <usart_init_rs232+0x100>
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	85 e0       	ldi	r24, 0x05	; 5
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1d8e:	56 d3       	rcall	.+1708   	; 0x243c <sysclk_enable_module>
    1d90:	6f c0       	rjmp	.+222    	; 0x1e70 <usart_init_rs232+0x1de>
    1d92:	c0 39       	cpi	r28, 0x90	; 144
    1d94:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1d96:	df 07       	cpc	r29, r31
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <usart_init_rs232+0x110>
    1d9a:	64 e0       	ldi	r22, 0x04	; 4
    1d9c:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1d9e:	4e d3       	rcall	.+1692   	; 0x243c <sysclk_enable_module>
    1da0:	67 c0       	rjmp	.+206    	; 0x1e70 <usart_init_rs232+0x1de>
    1da2:	c0 39       	cpi	r28, 0x90	; 144
    1da4:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1da6:	d8 07       	cpc	r29, r24
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <usart_init_rs232+0x120>
    1daa:	64 e0       	ldi	r22, 0x04	; 4
    1dac:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1dae:	46 d3       	rcall	.+1676   	; 0x243c <sysclk_enable_module>
    1db0:	5f c0       	rjmp	.+190    	; 0x1e70 <usart_init_rs232+0x1de>
    1db2:	c0 39       	cpi	r28, 0x90	; 144
    1db4:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1db6:	de 07       	cpc	r29, r30
    1db8:	21 f4       	brne	.+8      	; 0x1dc2 <usart_init_rs232+0x130>
    1dba:	64 e0       	ldi	r22, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1dbc:	85 e0       	ldi	r24, 0x05	; 5
    1dbe:	3e d3       	rcall	.+1660   	; 0x243c <sysclk_enable_module>
    1dc0:	57 c0       	rjmp	.+174    	; 0x1e70 <usart_init_rs232+0x1de>
    1dc2:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1dc4:	fb e0       	ldi	r31, 0x0B	; 11
    1dc6:	df 07       	cpc	r29, r31
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1dca:	64 e0       	ldi	r22, 0x04	; 4
    1dcc:	86 e0       	ldi	r24, 0x06	; 6
    1dce:	36 d3       	rcall	.+1644   	; 0x243c <sysclk_enable_module>
    1dd0:	4f c0       	rjmp	.+158    	; 0x1e70 <usart_init_rs232+0x1de>
    1dd2:	c0 3c       	cpi	r28, 0xC0	; 192
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1dd4:	88 e0       	ldi	r24, 0x08	; 8
    1dd6:	d8 07       	cpc	r29, r24
    1dd8:	21 f4       	brne	.+8      	; 0x1de2 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1dda:	68 e0       	ldi	r22, 0x08	; 8
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	2e d3       	rcall	.+1628   	; 0x243c <sysclk_enable_module>
    1de0:	47 c0       	rjmp	.+142    	; 0x1e70 <usart_init_rs232+0x1de>
    1de2:	c0 3c       	cpi	r28, 0xC0	; 192
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1de4:	e9 e0       	ldi	r30, 0x09	; 9
    1de6:	de 07       	cpc	r29, r30
    1de8:	21 f4       	brne	.+8      	; 0x1df2 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1dea:	68 e0       	ldi	r22, 0x08	; 8
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	26 d3       	rcall	.+1612   	; 0x243c <sysclk_enable_module>
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1df2:	c0 3a       	cpi	r28, 0xA0	; 160
    1df4:	f8 e0       	ldi	r31, 0x08	; 8
    1df6:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1df8:	21 f4       	brne	.+8      	; 0x1e02 <usart_init_rs232+0x170>
    1dfa:	60 e1       	ldi	r22, 0x10	; 16
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	1e d3       	rcall	.+1596   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1e00:	37 c0       	rjmp	.+110    	; 0x1e70 <usart_init_rs232+0x1de>
    1e02:	c0 3a       	cpi	r28, 0xA0	; 160
    1e04:	89 e0       	ldi	r24, 0x09	; 9
    1e06:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1e08:	21 f4       	brne	.+8      	; 0x1e12 <usart_init_rs232+0x180>
    1e0a:	60 e1       	ldi	r22, 0x10	; 16
    1e0c:	84 e0       	ldi	r24, 0x04	; 4
    1e0e:	16 d3       	rcall	.+1580   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1e10:	2f c0       	rjmp	.+94     	; 0x1e70 <usart_init_rs232+0x1de>
    1e12:	c0 3a       	cpi	r28, 0xA0	; 160
    1e14:	ea e0       	ldi	r30, 0x0A	; 10
    1e16:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <usart_init_rs232+0x190>
    1e1a:	60 e1       	ldi	r22, 0x10	; 16
    1e1c:	85 e0       	ldi	r24, 0x05	; 5
    1e1e:	0e d3       	rcall	.+1564   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1e20:	27 c0       	rjmp	.+78     	; 0x1e70 <usart_init_rs232+0x1de>
    1e22:	c0 3a       	cpi	r28, 0xA0	; 160
    1e24:	fb e0       	ldi	r31, 0x0B	; 11
    1e26:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1e28:	21 f4       	brne	.+8      	; 0x1e32 <usart_init_rs232+0x1a0>
    1e2a:	60 e1       	ldi	r22, 0x10	; 16
    1e2c:	86 e0       	ldi	r24, 0x06	; 6
    1e2e:	06 d3       	rcall	.+1548   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1e30:	1f c0       	rjmp	.+62     	; 0x1e70 <usart_init_rs232+0x1de>
    1e32:	c0 3b       	cpi	r28, 0xB0	; 176
    1e34:	88 e0       	ldi	r24, 0x08	; 8
    1e36:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1e38:	21 f4       	brne	.+8      	; 0x1e42 <usart_init_rs232+0x1b0>
    1e3a:	60 e2       	ldi	r22, 0x20	; 32
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	fe d2       	rcall	.+1532   	; 0x243c <sysclk_enable_module>
    1e40:	17 c0       	rjmp	.+46     	; 0x1e70 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1e42:	c0 3b       	cpi	r28, 0xB0	; 176
    1e44:	e9 e0       	ldi	r30, 0x09	; 9
    1e46:	de 07       	cpc	r29, r30
    1e48:	21 f4       	brne	.+8      	; 0x1e52 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1e4a:	60 e2       	ldi	r22, 0x20	; 32
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	f6 d2       	rcall	.+1516   	; 0x243c <sysclk_enable_module>
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <usart_init_rs232+0x1de>
    1e52:	c0 38       	cpi	r28, 0x80	; 128
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1e54:	f4 e0       	ldi	r31, 0x04	; 4
    1e56:	df 07       	cpc	r29, r31
    1e58:	21 f4       	brne	.+8      	; 0x1e62 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1e5a:	60 e4       	ldi	r22, 0x40	; 64
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	ee d2       	rcall	.+1500   	; 0x243c <sysclk_enable_module>
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <usart_init_rs232+0x1de>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1e62:	c0 3a       	cpi	r28, 0xA0	; 160
    1e64:	84 e0       	ldi	r24, 0x04	; 4
    1e66:	d8 07       	cpc	r29, r24
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1e68:	19 f4       	brne	.+6      	; 0x1e70 <usart_init_rs232+0x1de>
    1e6a:	60 e4       	ldi	r22, 0x40	; 64
    1e6c:	85 e0       	ldi	r24, 0x05	; 5
    1e6e:	e6 d2       	rcall	.+1484   	; 0x243c <sysclk_enable_module>
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	8f 73       	andi	r24, 0x3F	; 63
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	f8 01       	movw	r30, r16
    1e78:	95 81       	ldd	r25, Z+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1e7a:	84 81       	ldd	r24, Z+4	; 0x04
    1e7c:	89 2b       	or	r24, r25
    1e7e:	96 81       	ldd	r25, Z+6	; 0x06
    1e80:	91 11       	cpse	r25, r1
    1e82:	98 e0       	ldi	r25, 0x08	; 8
    1e84:	89 2b       	or	r24, r25
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	f8 01       	movw	r30, r16
    1e8a:	40 81       	ld	r20, Z
    1e8c:	51 81       	ldd	r21, Z+1	; 0x01
    1e8e:	62 81       	ldd	r22, Z+2	; 0x02
    1e90:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1e92:	00 e0       	ldi	r16, 0x00	; 0
    1e94:	12 e1       	ldi	r17, 0x12	; 18
    1e96:	2a e7       	ldi	r18, 0x7A	; 122
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	e7 dd       	rcall	.-1074   	; 0x1a6c <usart_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	98 60       	ori	r25, 0x08	; 8
    1ea2:	9c 83       	std	Y+4, r25	; 0x04
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	90 61       	ori	r25, 0x10	; 16
    1ea8:	9c 83       	std	Y+4, r25	; 0x04
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	08 95       	ret

00001eb4 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1ec6:	d9 01       	movw	r26, r18
    1ec8:	c8 01       	movw	r24, r16
    1eca:	b6 95       	lsr	r27
    1ecc:	a7 95       	ror	r26
    1ece:	97 95       	ror	r25
    1ed0:	87 95       	ror	r24
    1ed2:	48 17       	cp	r20, r24
    1ed4:	59 07       	cpc	r21, r25
    1ed6:	6a 07       	cpc	r22, r26
    1ed8:	7b 07       	cpc	r23, r27
    1eda:	78 f4       	brcc	.+30     	; 0x1efa <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1edc:	6a 01       	movw	r12, r20
    1ede:	7b 01       	movw	r14, r22
    1ee0:	cc 0c       	add	r12, r12
    1ee2:	dd 1c       	adc	r13, r13
    1ee4:	ee 1c       	adc	r14, r14
    1ee6:	ff 1c       	adc	r15, r15
    1ee8:	c9 01       	movw	r24, r18
    1eea:	b8 01       	movw	r22, r16
    1eec:	a7 01       	movw	r20, r14
    1eee:	96 01       	movw	r18, r12
    1ef0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodsi4>
    1ef4:	21 50       	subi	r18, 0x01	; 1
    1ef6:	31 09       	sbc	r19, r1
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1efe:	83 2f       	mov	r24, r19
    1f00:	8f 70       	andi	r24, 0x0F	; 15
    1f02:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1f04:	2e 83       	std	Y+6, r18	; 0x06
}
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	ff 90       	pop	r15
    1f10:	ef 90       	pop	r14
    1f12:	df 90       	pop	r13
    1f14:	cf 90       	pop	r12
    1f16:	08 95       	ret

00001f18 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	7c 01       	movw	r14, r24
    1f2e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <usart_init_spi+0x1e>
    1f34:	b2 c1       	rjmp	.+868    	; 0x229a <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1f36:	80 3c       	cpi	r24, 0xC0	; 192
    1f38:	91 05       	cpc	r25, r1
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1f3c:	60 e1       	ldi	r22, 0x10	; 16
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	7d d2       	rcall	.+1274   	; 0x243c <sysclk_enable_module>
    1f42:	ab c1       	rjmp	.+854    	; 0x229a <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1f44:	80 e8       	ldi	r24, 0x80	; 128
    1f46:	e8 16       	cp	r14, r24
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	f8 06       	cpc	r15, r24
    1f4c:	21 f4       	brne	.+8      	; 0x1f56 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1f4e:	62 e0       	ldi	r22, 0x02	; 2
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	74 d2       	rcall	.+1256   	; 0x243c <sysclk_enable_module>
    1f54:	a2 c1       	rjmp	.+836    	; 0x229a <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1f56:	e1 14       	cp	r14, r1
    1f58:	e1 e0       	ldi	r30, 0x01	; 1
    1f5a:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1f5c:	21 f4       	brne	.+8      	; 0x1f66 <usart_init_spi+0x4e>
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	6c d2       	rcall	.+1240   	; 0x243c <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1f64:	9a c1       	rjmp	.+820    	; 0x229a <usart_init_spi+0x382>
    1f66:	f0 e8       	ldi	r31, 0x80	; 128
    1f68:	ef 16       	cp	r14, r31
    1f6a:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1f6c:	ff 06       	cpc	r15, r31
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <usart_init_spi+0x60>
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	63 d2       	rcall	.+1222   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1f76:	91 c1       	rjmp	.+802    	; 0x229a <usart_init_spi+0x382>
    1f78:	30 e9       	ldi	r19, 0x90	; 144
    1f7a:	e3 16       	cp	r14, r19
    1f7c:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1f7e:	f3 06       	cpc	r15, r19
    1f80:	21 f4       	brne	.+8      	; 0x1f8a <usart_init_spi+0x72>
    1f82:	61 e0       	ldi	r22, 0x01	; 1
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	5a d2       	rcall	.+1204   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1f88:	88 c1       	rjmp	.+784    	; 0x229a <usart_init_spi+0x382>
    1f8a:	e1 14       	cp	r14, r1
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1f8e:	f8 06       	cpc	r15, r24
    1f90:	21 f4       	brne	.+8      	; 0x1f9a <usart_init_spi+0x82>
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	52 d2       	rcall	.+1188   	; 0x243c <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1f98:	80 c1       	rjmp	.+768    	; 0x229a <usart_init_spi+0x382>
    1f9a:	e0 e4       	ldi	r30, 0x40	; 64
    1f9c:	ee 16       	cp	r14, r30
    1f9e:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1fa0:	fe 06       	cpc	r15, r30
    1fa2:	21 f4       	brne	.+8      	; 0x1fac <usart_init_spi+0x94>
    1fa4:	62 e0       	ldi	r22, 0x02	; 2
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1fa8:	49 d2       	rcall	.+1170   	; 0x243c <sysclk_enable_module>
    1faa:	77 c1       	rjmp	.+750    	; 0x229a <usart_init_spi+0x382>
    1fac:	f0 e2       	ldi	r31, 0x20	; 32
    1fae:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1fb0:	f3 e0       	ldi	r31, 0x03	; 3
    1fb2:	ff 06       	cpc	r15, r31
    1fb4:	21 f4       	brne	.+8      	; 0x1fbe <usart_init_spi+0xa6>
    1fb6:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	40 d2       	rcall	.+1152   	; 0x243c <sysclk_enable_module>
    1fbc:	6e c1       	rjmp	.+732    	; 0x229a <usart_init_spi+0x382>
    1fbe:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1fc0:	38 e0       	ldi	r19, 0x08	; 8
    1fc2:	f3 06       	cpc	r15, r19
    1fc4:	21 f4       	brne	.+8      	; 0x1fce <usart_init_spi+0xb6>
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	38 d2       	rcall	.+1136   	; 0x243c <sysclk_enable_module>
    1fcc:	66 c1       	rjmp	.+716    	; 0x229a <usart_init_spi+0x382>
    1fce:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1fd0:	89 e0       	ldi	r24, 0x09	; 9
    1fd2:	f8 06       	cpc	r15, r24
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <usart_init_spi+0xc6>
    1fd6:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1fd8:	84 e0       	ldi	r24, 0x04	; 4
    1fda:	30 d2       	rcall	.+1120   	; 0x243c <sysclk_enable_module>
    1fdc:	5e c1       	rjmp	.+700    	; 0x229a <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1fde:	e1 14       	cp	r14, r1
    1fe0:	ea e0       	ldi	r30, 0x0A	; 10
    1fe2:	fe 06       	cpc	r15, r30
    1fe4:	21 f4       	brne	.+8      	; 0x1fee <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	85 e0       	ldi	r24, 0x05	; 5
    1fea:	28 d2       	rcall	.+1104   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1fec:	56 c1       	rjmp	.+684    	; 0x229a <usart_init_spi+0x382>
    1fee:	e1 14       	cp	r14, r1
    1ff0:	fb e0       	ldi	r31, 0x0B	; 11
    1ff2:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1ff4:	21 f4       	brne	.+8      	; 0x1ffe <usart_init_spi+0xe6>
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	86 e0       	ldi	r24, 0x06	; 6
    1ffa:	20 d2       	rcall	.+1088   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1ffc:	4e c1       	rjmp	.+668    	; 0x229a <usart_init_spi+0x382>
    1ffe:	30 e4       	ldi	r19, 0x40	; 64
    2000:	e3 16       	cp	r14, r19
    2002:	38 e0       	ldi	r19, 0x08	; 8
    2004:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2006:	21 f4       	brne	.+8      	; 0x2010 <usart_init_spi+0xf8>
    2008:	62 e0       	ldi	r22, 0x02	; 2
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	17 d2       	rcall	.+1070   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    200e:	45 c1       	rjmp	.+650    	; 0x229a <usart_init_spi+0x382>
    2010:	80 e4       	ldi	r24, 0x40	; 64
    2012:	e8 16       	cp	r14, r24
    2014:	89 e0       	ldi	r24, 0x09	; 9
    2016:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2018:	21 f4       	brne	.+8      	; 0x2022 <usart_init_spi+0x10a>
    201a:	62 e0       	ldi	r22, 0x02	; 2
    201c:	84 e0       	ldi	r24, 0x04	; 4
    201e:	0e d2       	rcall	.+1052   	; 0x243c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2020:	3c c1       	rjmp	.+632    	; 0x229a <usart_init_spi+0x382>
    2022:	e0 e4       	ldi	r30, 0x40	; 64
    2024:	ee 16       	cp	r14, r30
    2026:	ea e0       	ldi	r30, 0x0A	; 10
    2028:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    202a:	21 f4       	brne	.+8      	; 0x2034 <usart_init_spi+0x11c>
    202c:	62 e0       	ldi	r22, 0x02	; 2
    202e:	85 e0       	ldi	r24, 0x05	; 5
    2030:	05 d2       	rcall	.+1034   	; 0x243c <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2032:	33 c1       	rjmp	.+614    	; 0x229a <usart_init_spi+0x382>
    2034:	f0 e9       	ldi	r31, 0x90	; 144
    2036:	ef 16       	cp	r14, r31
    2038:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    203a:	ff 06       	cpc	r15, r31
    203c:	21 f4       	brne	.+8      	; 0x2046 <usart_init_spi+0x12e>
    203e:	64 e0       	ldi	r22, 0x04	; 4
    2040:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2042:	fc d1       	rcall	.+1016   	; 0x243c <sysclk_enable_module>
    2044:	2a c1       	rjmp	.+596    	; 0x229a <usart_init_spi+0x382>
    2046:	30 e9       	ldi	r19, 0x90	; 144
    2048:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    204a:	39 e0       	ldi	r19, 0x09	; 9
    204c:	f3 06       	cpc	r15, r19
    204e:	21 f4       	brne	.+8      	; 0x2058 <usart_init_spi+0x140>
    2050:	64 e0       	ldi	r22, 0x04	; 4
    2052:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2054:	f3 d1       	rcall	.+998    	; 0x243c <sysclk_enable_module>
    2056:	21 c1       	rjmp	.+578    	; 0x229a <usart_init_spi+0x382>
    2058:	80 e9       	ldi	r24, 0x90	; 144
    205a:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    205c:	8a e0       	ldi	r24, 0x0A	; 10
    205e:	f8 06       	cpc	r15, r24
    2060:	21 f4       	brne	.+8      	; 0x206a <usart_init_spi+0x152>
    2062:	64 e0       	ldi	r22, 0x04	; 4
    2064:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2066:	ea d1       	rcall	.+980    	; 0x243c <sysclk_enable_module>
    2068:	18 c1       	rjmp	.+560    	; 0x229a <usart_init_spi+0x382>
    206a:	e0 e9       	ldi	r30, 0x90	; 144
    206c:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    206e:	eb e0       	ldi	r30, 0x0B	; 11
    2070:	fe 06       	cpc	r15, r30
    2072:	21 f4       	brne	.+8      	; 0x207c <usart_init_spi+0x164>
    2074:	64 e0       	ldi	r22, 0x04	; 4
    2076:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2078:	e1 d1       	rcall	.+962    	; 0x243c <sysclk_enable_module>
    207a:	0f c1       	rjmp	.+542    	; 0x229a <usart_init_spi+0x382>
    207c:	f0 ec       	ldi	r31, 0xC0	; 192
    207e:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2080:	f8 e0       	ldi	r31, 0x08	; 8
    2082:	ff 06       	cpc	r15, r31
    2084:	21 f4       	brne	.+8      	; 0x208e <usart_init_spi+0x176>
    2086:	68 e0       	ldi	r22, 0x08	; 8
    2088:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    208a:	d8 d1       	rcall	.+944    	; 0x243c <sysclk_enable_module>
    208c:	06 c1       	rjmp	.+524    	; 0x229a <usart_init_spi+0x382>
    208e:	30 ec       	ldi	r19, 0xC0	; 192
    2090:	e3 16       	cp	r14, r19
    2092:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2094:	f3 06       	cpc	r15, r19
    2096:	21 f4       	brne	.+8      	; 0x20a0 <usart_init_spi+0x188>
    2098:	68 e0       	ldi	r22, 0x08	; 8
    209a:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    209c:	cf d1       	rcall	.+926    	; 0x243c <sysclk_enable_module>
    209e:	fd c0       	rjmp	.+506    	; 0x229a <usart_init_spi+0x382>
    20a0:	80 ea       	ldi	r24, 0xA0	; 160
    20a2:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    20a4:	88 e0       	ldi	r24, 0x08	; 8
    20a6:	f8 06       	cpc	r15, r24
    20a8:	61 f4       	brne	.+24     	; 0x20c2 <usart_init_spi+0x1aa>
    20aa:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    20ac:	83 e0       	ldi	r24, 0x03	; 3
    20ae:	c6 d1       	rcall	.+908    	; 0x243c <sysclk_enable_module>
    20b0:	e0 ea       	ldi	r30, 0xA0	; 160
    20b2:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    20b4:	84 81       	ldd	r24, Z+4	; 0x04
    20b6:	8f 7e       	andi	r24, 0xEF	; 239
    20b8:	84 83       	std	Z+4, r24	; 0x04
    20ba:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    20bc:	24 81       	ldd	r18, Z+4	; 0x04
    20be:	22 50       	subi	r18, 0x02	; 2
    20c0:	4c c0       	rjmp	.+152    	; 0x215a <usart_init_spi+0x242>
    20c2:	f0 ea       	ldi	r31, 0xA0	; 160
    20c4:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    20c6:	f9 e0       	ldi	r31, 0x09	; 9
    20c8:	ff 06       	cpc	r15, r31
    20ca:	21 f4       	brne	.+8      	; 0x20d4 <usart_init_spi+0x1bc>
    20cc:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    20ce:	84 e0       	ldi	r24, 0x04	; 4
    20d0:	b5 d1       	rcall	.+874    	; 0x243c <sysclk_enable_module>
    20d2:	e3 c0       	rjmp	.+454    	; 0x229a <usart_init_spi+0x382>
    20d4:	30 ea       	ldi	r19, 0xA0	; 160
    20d6:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    20d8:	3a e0       	ldi	r19, 0x0A	; 10
    20da:	f3 06       	cpc	r15, r19
    20dc:	21 f4       	brne	.+8      	; 0x20e6 <usart_init_spi+0x1ce>
    20de:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    20e0:	85 e0       	ldi	r24, 0x05	; 5
    20e2:	ac d1       	rcall	.+856    	; 0x243c <sysclk_enable_module>
    20e4:	da c0       	rjmp	.+436    	; 0x229a <usart_init_spi+0x382>
    20e6:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    20e8:	e8 16       	cp	r14, r24
    20ea:	8b e0       	ldi	r24, 0x0B	; 11
    20ec:	f8 06       	cpc	r15, r24
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    20f0:	60 e1       	ldi	r22, 0x10	; 16
    20f2:	86 e0       	ldi	r24, 0x06	; 6
    20f4:	a3 d1       	rcall	.+838    	; 0x243c <sysclk_enable_module>
    20f6:	d1 c0       	rjmp	.+418    	; 0x229a <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    20f8:	e0 eb       	ldi	r30, 0xB0	; 176
    20fa:	ee 16       	cp	r14, r30
    20fc:	e8 e0       	ldi	r30, 0x08	; 8
    20fe:	fe 06       	cpc	r15, r30
    2100:	21 f4       	brne	.+8      	; 0x210a <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2102:	60 e2       	ldi	r22, 0x20	; 32
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	9a d1       	rcall	.+820    	; 0x243c <sysclk_enable_module>
    2108:	c8 c0       	rjmp	.+400    	; 0x229a <usart_init_spi+0x382>
    210a:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    210c:	ef 16       	cp	r14, r31
    210e:	f9 e0       	ldi	r31, 0x09	; 9
    2110:	ff 06       	cpc	r15, r31
    2112:	21 f4       	brne	.+8      	; 0x211c <usart_init_spi+0x204>
    2114:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2116:	84 e0       	ldi	r24, 0x04	; 4
    2118:	91 d1       	rcall	.+802    	; 0x243c <sysclk_enable_module>
    211a:	bf c0       	rjmp	.+382    	; 0x229a <usart_init_spi+0x382>
    211c:	30 e8       	ldi	r19, 0x80	; 128
    211e:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2120:	34 e0       	ldi	r19, 0x04	; 4
    2122:	f3 06       	cpc	r15, r19
    2124:	21 f4       	brne	.+8      	; 0x212e <usart_init_spi+0x216>
    2126:	60 e4       	ldi	r22, 0x40	; 64
    2128:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    212a:	88 d1       	rcall	.+784    	; 0x243c <sysclk_enable_module>
    212c:	b6 c0       	rjmp	.+364    	; 0x229a <usart_init_spi+0x382>
    212e:	80 ea       	ldi	r24, 0xA0	; 160
    2130:	e8 16       	cp	r14, r24
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	f8 06       	cpc	r15, r24
    2136:	21 f4       	brne	.+8      	; 0x2140 <usart_init_spi+0x228>
    2138:	60 e4       	ldi	r22, 0x40	; 64
    213a:	85 e0       	ldi	r24, 0x05	; 5
    213c:	7f d1       	rcall	.+766    	; 0x243c <sysclk_enable_module>
    213e:	ad c0       	rjmp	.+346    	; 0x229a <usart_init_spi+0x382>
    2140:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2142:	84 81       	ldd	r24, Z+4	; 0x04
    2144:	8f 7e       	andi	r24, 0xEF	; 239
    2146:	84 83       	std	Z+4, r24	; 0x04
    2148:	fb 01       	movw	r30, r22
    214a:	24 81       	ldd	r18, Z+4	; 0x04
    214c:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    214e:	c7 01       	movw	r24, r14
    2150:	f0 ea       	ldi	r31, 0xA0	; 160
    2152:	ef 16       	cp	r14, r31
    2154:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    2156:	ff 06       	cpc	r15, r31
    2158:	49 f4       	brne	.+18     	; 0x216c <usart_init_spi+0x254>
    215a:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    215e:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    2160:	a5 c0       	rjmp	.+330    	; 0x22ac <usart_init_spi+0x394>
    2162:	0f 2e       	mov	r0, r31
    2164:	f1 e1       	ldi	r31, 0x11	; 17
    2166:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    2168:	f0 2d       	mov	r31, r0
    216a:	a4 c0       	rjmp	.+328    	; 0x22b4 <usart_init_spi+0x39c>
    216c:	80 3b       	cpi	r24, 0xB0	; 176
    216e:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    2170:	93 07       	cpc	r25, r19
    2172:	91 f0       	breq	.+36     	; 0x2198 <usart_init_spi+0x280>
    2174:	80 3a       	cpi	r24, 0xA0	; 160
    2176:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2178:	9e 07       	cpc	r25, r30
    217a:	49 f4       	brne	.+18     	; 0x218e <usart_init_spi+0x276>
    217c:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    2180:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    2182:	9b c0       	rjmp	.+310    	; 0x22ba <usart_init_spi+0x3a2>
    2184:	0f 2e       	mov	r0, r31
    2186:	f9 e1       	ldi	r31, 0x19	; 25
    2188:	df 2e       	mov	r13, r31
    218a:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    218c:	16 c0       	rjmp	.+44     	; 0x21ba <usart_init_spi+0x2a2>
    218e:	80 3b       	cpi	r24, 0xB0	; 176
    2190:	f9 e0       	ldi	r31, 0x09	; 9
    2192:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    2194:	f1 f0       	breq	.+60     	; 0x21d2 <usart_init_spi+0x2ba>
    2196:	04 c0       	rjmp	.+8      	; 0x21a0 <usart_init_spi+0x288>
    2198:	0f 2e       	mov	r0, r31
    219a:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    219c:	df 2e       	mov	r13, r31
    219e:	f0 2d       	mov	r31, r0
    21a0:	80 3a       	cpi	r24, 0xA0	; 160
    21a2:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    21a4:	93 07       	cpc	r25, r19
    21a6:	49 f4       	brne	.+18     	; 0x21ba <usart_init_spi+0x2a2>
    21a8:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    21ac:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    21ae:	8a c0       	rjmp	.+276    	; 0x22c4 <usart_init_spi+0x3ac>
    21b0:	0f 2e       	mov	r0, r31
    21b2:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    21b4:	df 2e       	mov	r13, r31
    21b6:	f0 2d       	mov	r31, r0
    21b8:	15 c0       	rjmp	.+42     	; 0x21e4 <usart_init_spi+0x2cc>
    21ba:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    21bc:	9b 40       	sbci	r25, 0x0B	; 11
    21be:	91 f4       	brne	.+36     	; 0x21e4 <usart_init_spi+0x2cc>
    21c0:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    21c4:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    21c6:	0a c0       	rjmp	.+20     	; 0x21dc <usart_init_spi+0x2c4>
    21c8:	0f 2e       	mov	r0, r31
    21ca:	f9 e2       	ldi	r31, 0x29	; 41
    21cc:	df 2e       	mov	r13, r31
    21ce:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    21d0:	09 c0       	rjmp	.+18     	; 0x21e4 <usart_init_spi+0x2cc>
    21d2:	0f 2e       	mov	r0, r31
    21d4:	fd e1       	ldi	r31, 0x1D	; 29
    21d6:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    21d8:	f0 2d       	mov	r31, r0
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <usart_init_spi+0x2cc>
    21dc:	0f 2e       	mov	r0, r31
    21de:	fd e2       	ldi	r31, 0x2D	; 45
    21e0:	df 2e       	mov	r13, r31
    21e2:	f0 2d       	mov	r31, r0
    21e4:	ed 2d       	mov	r30, r13
    21e6:	e6 95       	lsr	r30
    21e8:	e6 95       	lsr	r30
    21ea:	e6 95       	lsr	r30
    21ec:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    21ee:	e3 9f       	mul	r30, r19
    21f0:	f0 01       	movw	r30, r0
    21f2:	11 24       	eor	r1, r1
    21f4:	fa 5f       	subi	r31, 0xFA	; 250
    21f6:	3d 2d       	mov	r19, r13
    21f8:	37 70       	andi	r19, 0x07	; 7
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    21fe:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <usart_init_spi+0x2ee>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    220a:	81 83       	std	Z+1, r24	; 0x01
    220c:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    220e:	10 f0       	brcs	.+4      	; 0x2214 <usart_init_spi+0x2fc>
    2210:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <usart_init_spi+0x2fe>
    2214:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    2216:	df 01       	movw	r26, r30
	return flags;
    2218:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    221a:	a3 0f       	add	r26, r19
    221c:	b1 1d       	adc	r27, r1
    221e:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    2220:	99 83       	std	Y+1, r25	; 0x01
    2222:	f8 94       	cli
    2224:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2226:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2228:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    222a:	2c 93       	st	X, r18
    222c:	9c 91       	ld	r25, X
    222e:	94 2b       	or	r25, r20
    2230:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    2232:	3f bf       	out	0x3f, r19	; 63
    2234:	85 83       	std	Z+5, r24	; 0x05
    2236:	f7 01       	movw	r30, r14
    2238:	85 81       	ldd	r24, Z+5	; 0x05
    223a:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    223c:	85 83       	std	Z+5, r24	; 0x05
    223e:	f8 01       	movw	r30, r16
    2240:	84 81       	ldd	r24, Z+4	; 0x04
    2242:	8d 7f       	andi	r24, 0xFD	; 253
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	29 f4       	brne	.+10     	; 0x2252 <usart_init_spi+0x33a>
    2248:	f7 01       	movw	r30, r14
    224a:	85 81       	ldd	r24, Z+5	; 0x05
	}
	if (opt->data_order) {
    224c:	82 60       	ori	r24, 0x02	; 2
    224e:	85 83       	std	Z+5, r24	; 0x05
    2250:	04 c0       	rjmp	.+8      	; 0x225a <usart_init_spi+0x342>
    2252:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
    2254:	85 81       	ldd	r24, Z+5	; 0x05
    2256:	8d 7f       	andi	r24, 0xFD	; 253
    2258:	85 83       	std	Z+5, r24	; 0x05
    225a:	f8 01       	movw	r30, r16
    225c:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    225e:	88 23       	and	r24, r24
    2260:	29 f0       	breq	.+10     	; 0x226c <usart_init_spi+0x354>
    2262:	f7 01       	movw	r30, r14
    2264:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2266:	84 60       	ori	r24, 0x04	; 4
    2268:	85 83       	std	Z+5, r24	; 0x05
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <usart_init_spi+0x35c>
    226c:	f7 01       	movw	r30, r14
    226e:	85 81       	ldd	r24, Z+5	; 0x05
    2270:	8b 7f       	andi	r24, 0xFB	; 251
    2272:	85 83       	std	Z+5, r24	; 0x05
    2274:	f8 01       	movw	r30, r16
    2276:	40 81       	ld	r20, Z
    2278:	51 81       	ldd	r21, Z+1	; 0x01
    227a:	62 81       	ldd	r22, Z+2	; 0x02
    227c:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    227e:	00 e0       	ldi	r16, 0x00	; 0
    2280:	12 e1       	ldi	r17, 0x12	; 18
    2282:	2a e7       	ldi	r18, 0x7A	; 122
    2284:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2286:	c7 01       	movw	r24, r14
    2288:	15 de       	rcall	.-982    	; 0x1eb4 <usart_spi_set_baudrate>
    228a:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    228c:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    228e:	88 60       	ori	r24, 0x08	; 8
    2290:	84 83       	std	Z+4, r24	; 0x04
    2292:	84 81       	ldd	r24, Z+4	; 0x04
    2294:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2296:	84 83       	std	Z+4, r24	; 0x04
    2298:	1a c0       	rjmp	.+52     	; 0x22ce <usart_init_spi+0x3b6>
    229a:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    229c:	84 81       	ldd	r24, Z+4	; 0x04
    229e:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    22a0:	84 83       	std	Z+4, r24	; 0x04
    22a2:	f8 01       	movw	r30, r16
    22a4:	24 81       	ldd	r18, Z+4	; 0x04
    22a6:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    22a8:	c7 01       	movw	r24, r14
    22aa:	60 cf       	rjmp	.-320    	; 0x216c <usart_init_spi+0x254>
    22ac:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    22ae:	f5 e1       	ldi	r31, 0x15	; 21
    22b0:	df 2e       	mov	r13, r31
    22b2:	f0 2d       	mov	r31, r0
    22b4:	80 ea       	ldi	r24, 0xA0	; 160
    22b6:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    22b8:	6a cf       	rjmp	.-300    	; 0x218e <usart_init_spi+0x276>
    22ba:	0f 2e       	mov	r0, r31
    22bc:	fd e1       	ldi	r31, 0x1D	; 29
    22be:	df 2e       	mov	r13, r31
    22c0:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    22c2:	7b cf       	rjmp	.-266    	; 0x21ba <usart_init_spi+0x2a2>
    22c4:	0f 2e       	mov	r0, r31
    22c6:	f5 e2       	ldi	r31, 0x25	; 37
    22c8:	df 2e       	mov	r13, r31
    22ca:	f0 2d       	mov	r31, r0
    22cc:	8b cf       	rjmp	.-234    	; 0x21e4 <usart_init_spi+0x2cc>
    22ce:	0f 90       	pop	r0
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	08 95       	ret

000022e0 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    22e0:	80 3a       	cpi	r24, 0xA0	; 160
    22e2:	28 e0       	ldi	r18, 0x08	; 8
    22e4:	92 07       	cpc	r25, r18
    22e6:	21 f4       	brne	.+8      	; 0x22f0 <usart_spi_init+0x10>
    22e8:	60 e1       	ldi	r22, 0x10	; 16
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	a7 c0       	rjmp	.+334    	; 0x243c <sysclk_enable_module>
    22ee:	08 95       	ret
    22f0:	80 3b       	cpi	r24, 0xB0	; 176
    22f2:	28 e0       	ldi	r18, 0x08	; 8
    22f4:	92 07       	cpc	r25, r18
    22f6:	21 f4       	brne	.+8      	; 0x2300 <usart_spi_init+0x20>
    22f8:	60 e2       	ldi	r22, 0x20	; 32
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	9f c0       	rjmp	.+318    	; 0x243c <sysclk_enable_module>
    22fe:	08 95       	ret
    2300:	80 3a       	cpi	r24, 0xA0	; 160
    2302:	29 e0       	ldi	r18, 0x09	; 9
    2304:	92 07       	cpc	r25, r18
    2306:	21 f4       	brne	.+8      	; 0x2310 <usart_spi_init+0x30>
    2308:	60 e1       	ldi	r22, 0x10	; 16
    230a:	84 e0       	ldi	r24, 0x04	; 4
    230c:	97 c0       	rjmp	.+302    	; 0x243c <sysclk_enable_module>
    230e:	08 95       	ret
    2310:	80 3b       	cpi	r24, 0xB0	; 176
    2312:	29 e0       	ldi	r18, 0x09	; 9
    2314:	92 07       	cpc	r25, r18
    2316:	21 f4       	brne	.+8      	; 0x2320 <usart_spi_init+0x40>
    2318:	60 e2       	ldi	r22, 0x20	; 32
    231a:	84 e0       	ldi	r24, 0x04	; 4
    231c:	8f c0       	rjmp	.+286    	; 0x243c <sysclk_enable_module>
    231e:	08 95       	ret
    2320:	80 3a       	cpi	r24, 0xA0	; 160
    2322:	2a e0       	ldi	r18, 0x0A	; 10
    2324:	92 07       	cpc	r25, r18
    2326:	21 f4       	brne	.+8      	; 0x2330 <usart_spi_init+0x50>
    2328:	60 e1       	ldi	r22, 0x10	; 16
    232a:	85 e0       	ldi	r24, 0x05	; 5
    232c:	87 c0       	rjmp	.+270    	; 0x243c <sysclk_enable_module>
    232e:	08 95       	ret
    2330:	80 3a       	cpi	r24, 0xA0	; 160
    2332:	9b 40       	sbci	r25, 0x0B	; 11
    2334:	19 f4       	brne	.+6      	; 0x233c <usart_spi_init+0x5c>
    2336:	60 e1       	ldi	r22, 0x10	; 16
    2338:	86 e0       	ldi	r24, 0x06	; 6
    233a:	80 c0       	rjmp	.+256    	; 0x243c <sysclk_enable_module>
    233c:	08 95       	ret

0000233e <usart_spi_setup_device>:
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	00 d0       	rcall	.+0      	; 0x2348 <usart_spi_setup_device+0xa>
    2348:	00 d0       	rcall	.+0      	; 0x234a <usart_spi_setup_device+0xc>
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	09 83       	std	Y+1, r16	; 0x01
    2350:	1a 83       	std	Y+2, r17	; 0x02
    2352:	2b 83       	std	Y+3, r18	; 0x03
    2354:	3c 83       	std	Y+4, r19	; 0x04
    2356:	4d 83       	std	Y+5, r20	; 0x05
    2358:	1e 82       	std	Y+6, r1	; 0x06
    235a:	be 01       	movw	r22, r28
    235c:	6f 5f       	subi	r22, 0xFF	; 255
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	db dd       	rcall	.-1098   	; 0x1f18 <usart_init_spi>
    2362:	26 96       	adiw	r28, 0x06	; 6
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	08 95       	ret

00002372 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    2372:	fb 01       	movw	r30, r22
    2374:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2376:	e8 2f       	mov	r30, r24
    2378:	e6 95       	lsr	r30
    237a:	e6 95       	lsr	r30
    237c:	e6 95       	lsr	r30
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	e4 9f       	mul	r30, r20
    2382:	f0 01       	movw	r30, r0
    2384:	11 24       	eor	r1, r1
    2386:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2388:	87 70       	andi	r24, 0x07	; 7
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	a9 01       	movw	r20, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <usart_spi_select_device+0x24>
    2392:	44 0f       	add	r20, r20
    2394:	55 1f       	adc	r21, r21
    2396:	8a 95       	dec	r24
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    239a:	46 83       	std	Z+6, r20	; 0x06
    239c:	08 95       	ret

0000239e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    239e:	fb 01       	movw	r30, r22
    23a0:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    23a2:	e8 2f       	mov	r30, r24
    23a4:	e6 95       	lsr	r30
    23a6:	e6 95       	lsr	r30
    23a8:	e6 95       	lsr	r30
    23aa:	40 e2       	ldi	r20, 0x20	; 32
    23ac:	e4 9f       	mul	r30, r20
    23ae:	f0 01       	movw	r30, r0
    23b0:	11 24       	eor	r1, r1
    23b2:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    23b4:	87 70       	andi	r24, 0x07	; 7
    23b6:	21 e0       	ldi	r18, 0x01	; 1
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	a9 01       	movw	r20, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <usart_spi_deselect_device+0x24>
    23be:	44 0f       	add	r20, r20
    23c0:	55 1f       	adc	r21, r21
    23c2:	8a 95       	dec	r24
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    23c6:	45 83       	std	Z+5, r20	; 0x05
    23c8:	08 95       	ret

000023ca <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	1f 92       	push	r1
    23d0:	1f 92       	push	r1
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    23dc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    23e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    23e4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    23e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    23ec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    23f0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    23f4:	6c e0       	ldi	r22, 0x0C	; 12
    23f6:	81 e4       	ldi	r24, 0x41	; 65
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	55 d0       	rcall	.+170    	; 0x24a6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    23fc:	8f b7       	in	r24, 0x3f	; 63
    23fe:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2400:	f8 94       	cli
	return flags;
    2402:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2404:	e0 e5       	ldi	r30, 0x50	; 80
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	82 60       	ori	r24, 0x02	; 2
    240c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    240e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2410:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2412:	81 ff       	sbrs	r24, 1
    2414:	fd cf       	rjmp	.-6      	; 0x2410 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	80 e4       	ldi	r24, 0x40	; 64
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	44 d0       	rcall	.+136    	; 0x24a6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    241e:	8f b7       	in	r24, 0x3f	; 63
    2420:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2422:	f8 94       	cli
	return flags;
    2424:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2426:	e0 e5       	ldi	r30, 0x50	; 80
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	8e 7f       	andi	r24, 0xFE	; 254
    242e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2430:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	1f 92       	push	r1
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2446:	9f b7       	in	r25, 0x3f	; 63
    2448:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    244a:	f8 94       	cli
	return flags;
    244c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    244e:	e8 2f       	mov	r30, r24
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	e0 59       	subi	r30, 0x90	; 144
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 95       	com	r22
    2458:	80 81       	ld	r24, Z
    245a:	68 23       	and	r22, r24
    245c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    245e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2460:	0f 90       	pop	r0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	1f 92       	push	r1
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2472:	9f b7       	in	r25, 0x3f	; 63
    2474:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2476:	f8 94       	cli
	return flags;
    2478:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    247a:	e8 2f       	mov	r30, r24
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	e0 59       	subi	r30, 0x90	; 144
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	68 2b       	or	r22, r24
    2486:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2488:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    248a:	0f 90       	pop	r0
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2492:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    2496:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2498:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    249a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    249e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    24a0:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    24a4:	08 95       	ret

000024a6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    24a6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    24a8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    24aa:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    24ac:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    24ae:	60 83       	st	Z, r22
	ret                             // Return to caller
    24b0:	08 95       	ret

000024b2 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    24b2:	cf 92       	push	r12
    24b4:	df 92       	push	r13
    24b6:	ef 92       	push	r14
    24b8:	ff 92       	push	r15
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    24c0:	6b 01       	movw	r12, r22
    24c2:	e1 2c       	mov	r14, r1
    24c4:	f1 2c       	mov	r15, r1
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	72 e1       	ldi	r23, 0x12	; 18
    24ca:	8a e7       	ldi	r24, 0x7A	; 122
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	a7 01       	movw	r20, r14
    24d0:	96 01       	movw	r18, r12
    24d2:	61 d5       	rcall	.+2754   	; 0x2f96 <__udivmodsi4>
    24d4:	ca 01       	movw	r24, r20
    24d6:	b9 01       	movw	r22, r18
    24d8:	2f ef       	ldi	r18, 0xFF	; 255
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	5a d5       	rcall	.+2740   	; 0x2f96 <__udivmodsi4>
	if (smallest_div < 1) {
    24e2:	21 15       	cp	r18, r1
    24e4:	31 05       	cpc	r19, r1
    24e6:	29 f4       	brne	.+10     	; 0x24f2 <pwm_set_frequency+0x40>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    24ec:	21 e0       	ldi	r18, 0x01	; 1
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	2d c0       	rjmp	.+90     	; 0x254c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    24f2:	22 30       	cpi	r18, 0x02	; 2
    24f4:	31 05       	cpc	r19, r1
    24f6:	28 f4       	brcc	.+10     	; 0x2502 <pwm_set_frequency+0x50>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    24f8:	82 e0       	ldi	r24, 0x02	; 2
    24fa:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    24fc:	22 e0       	ldi	r18, 0x02	; 2
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	25 c0       	rjmp	.+74     	; 0x254c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    2502:	24 30       	cpi	r18, 0x04	; 4
    2504:	31 05       	cpc	r19, r1
    2506:	28 f4       	brcc	.+10     	; 0x2512 <pwm_set_frequency+0x60>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    2508:	83 e0       	ldi	r24, 0x03	; 3
    250a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    250c:	24 e0       	ldi	r18, 0x04	; 4
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	1d c0       	rjmp	.+58     	; 0x254c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    2512:	28 30       	cpi	r18, 0x08	; 8
    2514:	31 05       	cpc	r19, r1
    2516:	28 f4       	brcc	.+10     	; 0x2522 <pwm_set_frequency+0x70>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    2518:	84 e0       	ldi	r24, 0x04	; 4
    251a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    251c:	28 e0       	ldi	r18, 0x08	; 8
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	15 c0       	rjmp	.+42     	; 0x254c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    2522:	20 34       	cpi	r18, 0x40	; 64
    2524:	31 05       	cpc	r19, r1
    2526:	28 f4       	brcc	.+10     	; 0x2532 <pwm_set_frequency+0x80>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    2528:	85 e0       	ldi	r24, 0x05	; 5
    252a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    252c:	20 e4       	ldi	r18, 0x40	; 64
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	0d c0       	rjmp	.+26     	; 0x254c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    2532:	2f 3f       	cpi	r18, 0xFF	; 255
    2534:	31 05       	cpc	r19, r1
    2536:	09 f0       	breq	.+2      	; 0x253a <pwm_set_frequency+0x88>
    2538:	28 f4       	brcc	.+10     	; 0x2544 <pwm_set_frequency+0x92>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    253a:	86 e0       	ldi	r24, 0x06	; 6
    253c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	31 e0       	ldi	r19, 0x01	; 1
    2542:	04 c0       	rjmp	.+8      	; 0x254c <pwm_set_frequency+0x9a>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    2544:	87 e0       	ldi	r24, 0x07	; 7
    2546:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	72 e1       	ldi	r23, 0x12	; 18
    2554:	8a e7       	ldi	r24, 0x7A	; 122
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	1e d5       	rcall	.+2620   	; 0x2f96 <__udivmodsi4>
    255a:	ca 01       	movw	r24, r20
    255c:	b9 01       	movw	r22, r18
    255e:	a7 01       	movw	r20, r14
    2560:	96 01       	movw	r18, r12
    2562:	19 d5       	rcall	.+2610   	; 0x2f96 <__udivmodsi4>
    2564:	2d 83       	std	Y+5, r18	; 0x05
    2566:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    2568:	24 36       	cpi	r18, 0x64	; 100
    256a:	31 05       	cpc	r19, r1
    256c:	18 f4       	brcc	.+6      	; 0x2574 <pwm_set_frequency+0xc2>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    256e:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    2570:	1d 82       	std	Y+5, r1	; 0x05
    2572:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	cf 90       	pop	r12
    2580:	08 95       	ret

00002582 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	ec 01       	movw	r28, r24
    258c:	89 01       	movw	r16, r18

	/* Set TC and correct I/O pin to output */
/*
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    258e:	86 2f       	mov	r24, r22
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	87 30       	cpi	r24, 0x07	; 7
    2594:	91 05       	cpc	r25, r1
    2596:	08 f0       	brcs	.+2      	; 0x259a <pwm_init+0x18>
    2598:	8a c0       	rjmp	.+276    	; 0x26ae <pwm_init+0x12c>
    259a:	fc 01       	movw	r30, r24
    259c:	88 27       	eor	r24, r24
    259e:	e2 50       	subi	r30, 0x02	; 2
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	8f 4f       	sbci	r24, 0xFF	; 255
    25a4:	1a c5       	rjmp	.+2612   	; 0x2fda <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	98 e0       	ldi	r25, 0x08	; 8
    25aa:	88 83       	st	Y, r24
    25ac:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    25ae:	e0 e4       	ldi	r30, 0x40	; 64
    25b0:	f6 e0       	ldi	r31, 0x06	; 6
    25b2:	30 81       	ld	r19, Z
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	2f ef       	ldi	r18, 0xFF	; 255
    25ba:	24 0f       	add	r18, r20
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <pwm_init+0x40>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	2a 95       	dec	r18
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <pwm_init+0x3c>
    25c6:	83 2b       	or	r24, r19
    25c8:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    25ca:	71 c0       	rjmp	.+226    	; 0x26ae <pwm_init+0x12c>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    25cc:	80 e4       	ldi	r24, 0x40	; 64
    25ce:	98 e0       	ldi	r25, 0x08	; 8
    25d0:	88 83       	st	Y, r24
    25d2:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    25d4:	e0 e4       	ldi	r30, 0x40	; 64
    25d6:	f6 e0       	ldi	r31, 0x06	; 6
    25d8:	30 81       	ld	r19, Z
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	23 e0       	ldi	r18, 0x03	; 3
    25e0:	24 0f       	add	r18, r20
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <pwm_init+0x66>
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	2a 95       	dec	r18
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <pwm_init+0x62>
    25ec:	83 2b       	or	r24, r19
    25ee:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    25f0:	5e c0       	rjmp	.+188    	; 0x26ae <pwm_init+0x12c>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	99 e0       	ldi	r25, 0x09	; 9
    25f6:	88 83       	st	Y, r24
    25f8:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    25fa:	e0 e6       	ldi	r30, 0x60	; 96
    25fc:	f6 e0       	ldi	r31, 0x06	; 6
    25fe:	30 81       	ld	r19, Z
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	2f ef       	ldi	r18, 0xFF	; 255
    2606:	24 0f       	add	r18, r20
    2608:	02 c0       	rjmp	.+4      	; 0x260e <pwm_init+0x8c>
    260a:	88 0f       	add	r24, r24
    260c:	99 1f       	adc	r25, r25
    260e:	2a 95       	dec	r18
    2610:	e2 f7       	brpl	.-8      	; 0x260a <pwm_init+0x88>
    2612:	83 2b       	or	r24, r19
    2614:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2616:	4b c0       	rjmp	.+150    	; 0x26ae <pwm_init+0x12c>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    2618:	80 e4       	ldi	r24, 0x40	; 64
    261a:	99 e0       	ldi	r25, 0x09	; 9
    261c:	88 83       	st	Y, r24
    261e:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    2620:	e0 e6       	ldi	r30, 0x60	; 96
    2622:	f6 e0       	ldi	r31, 0x06	; 6
    2624:	30 81       	ld	r19, Z
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	23 e0       	ldi	r18, 0x03	; 3
    262c:	24 0f       	add	r18, r20
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <pwm_init+0xb2>
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	2a 95       	dec	r18
    2636:	e2 f7       	brpl	.-8      	; 0x2630 <pwm_init+0xae>
    2638:	83 2b       	or	r24, r19
    263a:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    263c:	38 c0       	rjmp	.+112    	; 0x26ae <pwm_init+0x12c>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	9a e0       	ldi	r25, 0x0A	; 10
    2642:	88 83       	st	Y, r24
    2644:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    2646:	e0 e8       	ldi	r30, 0x80	; 128
    2648:	f6 e0       	ldi	r31, 0x06	; 6
    264a:	30 81       	ld	r19, Z
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	2f ef       	ldi	r18, 0xFF	; 255
    2652:	24 0f       	add	r18, r20
    2654:	02 c0       	rjmp	.+4      	; 0x265a <pwm_init+0xd8>
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	2a 95       	dec	r18
    265c:	e2 f7       	brpl	.-8      	; 0x2656 <pwm_init+0xd4>
    265e:	83 2b       	or	r24, r19
    2660:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    2662:	25 c0       	rjmp	.+74     	; 0x26ae <pwm_init+0x12c>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    2664:	80 e4       	ldi	r24, 0x40	; 64
    2666:	9a e0       	ldi	r25, 0x0A	; 10
    2668:	88 83       	st	Y, r24
    266a:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    266c:	e0 e8       	ldi	r30, 0x80	; 128
    266e:	f6 e0       	ldi	r31, 0x06	; 6
    2670:	30 81       	ld	r19, Z
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	23 e0       	ldi	r18, 0x03	; 3
    2678:	24 0f       	add	r18, r20
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <pwm_init+0xfe>
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	2a 95       	dec	r18
    2682:	e2 f7       	brpl	.-8      	; 0x267c <pwm_init+0xfa>
    2684:	83 2b       	or	r24, r19
    2686:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    2688:	12 c0       	rjmp	.+36     	; 0x26ae <pwm_init+0x12c>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	9b e0       	ldi	r25, 0x0B	; 11
    268e:	88 83       	st	Y, r24
    2690:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    2692:	e0 ea       	ldi	r30, 0xA0	; 160
    2694:	f6 e0       	ldi	r31, 0x06	; 6
    2696:	30 81       	ld	r19, Z
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	2f ef       	ldi	r18, 0xFF	; 255
    269e:	24 0f       	add	r18, r20
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <pwm_init+0x124>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	2a 95       	dec	r18
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <pwm_init+0x120>
    26aa:	83 2b       	or	r24, r19
    26ac:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    26ae:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    26b0:	42 30       	cpi	r20, 0x02	; 2
    26b2:	61 f0       	breq	.+24     	; 0x26cc <pwm_init+0x14a>
    26b4:	18 f4       	brcc	.+6      	; 0x26bc <pwm_init+0x13a>
    26b6:	41 30       	cpi	r20, 0x01	; 1
    26b8:	31 f0       	breq	.+12     	; 0x26c6 <pwm_init+0x144>
    26ba:	10 c0       	rjmp	.+32     	; 0x26dc <pwm_init+0x15a>
    26bc:	43 30       	cpi	r20, 0x03	; 3
    26be:	49 f0       	breq	.+18     	; 0x26d2 <pwm_init+0x150>
    26c0:	44 30       	cpi	r20, 0x04	; 4
    26c2:	51 f0       	breq	.+20     	; 0x26d8 <pwm_init+0x156>
    26c4:	0b c0       	rjmp	.+22     	; 0x26dc <pwm_init+0x15a>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    26c6:	80 e1       	ldi	r24, 0x10	; 16
    26c8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    26ca:	08 c0       	rjmp	.+16     	; 0x26dc <pwm_init+0x15a>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    26cc:	80 e2       	ldi	r24, 0x20	; 32
    26ce:	8b 83       	std	Y+3, r24	; 0x03
		break;
    26d0:	05 c0       	rjmp	.+10     	; 0x26dc <pwm_init+0x15a>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    26d2:	80 e4       	ldi	r24, 0x40	; 64
    26d4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <pwm_init+0x15a>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    26dc:	88 81       	ld	r24, Y
    26de:	99 81       	ldd	r25, Y+1	; 0x01
    26e0:	46 d9       	rcall	.-3444   	; 0x196e <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    26e2:	e8 81       	ld	r30, Y
    26e4:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    26e6:	81 81       	ldd	r24, Z+1	; 0x01
    26e8:	88 7f       	andi	r24, 0xF8	; 248
    26ea:	83 60       	ori	r24, 0x03	; 3
    26ec:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    26ee:	1d 82       	std	Y+5, r1	; 0x05
    26f0:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    26f2:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    26f4:	e8 81       	ld	r30, Y
    26f6:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    26f8:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    26fa:	80 7f       	andi	r24, 0xF0	; 240

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    26fc:	80 83       	st	Z, r24
    26fe:	b8 01       	movw	r22, r16
    2700:	ce 01       	movw	r24, r28
}
    2702:	d7 de       	rcall	.-594    	; 0x24b2 <pwm_set_frequency>
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	08 95       	ret

0000270e <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	ec 01       	movw	r28, r24
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    2714:	2d 81       	ldd	r18, Y+5	; 0x05
    2716:	3e 81       	ldd	r19, Y+6	; 0x06
    2718:	a6 2f       	mov	r26, r22
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	66 d4       	rcall	.+2252   	; 0x2fea <__umulhisi3>
    271e:	24 e6       	ldi	r18, 0x64	; 100
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	50 e0       	ldi	r21, 0x00	; 0
    2726:	37 d4       	rcall	.+2158   	; 0x2f96 <__udivmodsi4>
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	e8 81       	ld	r30, Y
    272c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    272e:	e6 fd       	sbrc	r30, 6
    2730:	17 c0       	rjmp	.+46     	; 0x2760 <pwm_start+0x52>
		switch (channel_index) {
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	61 f0       	breq	.+24     	; 0x274e <pwm_start+0x40>
    2736:	18 f4       	brcc	.+6      	; 0x273e <pwm_start+0x30>
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	31 f0       	breq	.+12     	; 0x2748 <pwm_start+0x3a>
    273c:	1b c0       	rjmp	.+54     	; 0x2774 <pwm_start+0x66>
    273e:	83 30       	cpi	r24, 0x03	; 3
    2740:	49 f0       	breq	.+18     	; 0x2754 <pwm_start+0x46>
    2742:	84 30       	cpi	r24, 0x04	; 4
    2744:	51 f0       	breq	.+20     	; 0x275a <pwm_start+0x4c>
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <pwm_start+0x66>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2748:	20 af       	std	Z+56, r18	; 0x38
    274a:	31 af       	std	Z+57, r19	; 0x39
    274c:	13 c0       	rjmp	.+38     	; 0x2774 <pwm_start+0x66>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    274e:	22 af       	std	Z+58, r18	; 0x3a
    2750:	33 af       	std	Z+59, r19	; 0x3b
    2752:	10 c0       	rjmp	.+32     	; 0x2774 <pwm_start+0x66>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2754:	24 af       	std	Z+60, r18	; 0x3c
    2756:	35 af       	std	Z+61, r19	; 0x3d
    2758:	0d c0       	rjmp	.+26     	; 0x2774 <pwm_start+0x66>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    275a:	26 af       	std	Z+62, r18	; 0x3e
    275c:	37 af       	std	Z+63, r19	; 0x3f
    275e:	0a c0       	rjmp	.+20     	; 0x2774 <pwm_start+0x66>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	19 f0       	breq	.+6      	; 0x276a <pwm_start+0x5c>
    2764:	82 30       	cpi	r24, 0x02	; 2
    2766:	21 f0       	breq	.+8      	; 0x2770 <pwm_start+0x62>
    2768:	05 c0       	rjmp	.+10     	; 0x2774 <pwm_start+0x66>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    276a:	20 af       	std	Z+56, r18	; 0x38
    276c:	31 af       	std	Z+57, r19	; 0x39
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <pwm_start+0x66>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2770:	22 af       	std	Z+58, r18	; 0x3a
    2772:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	e8 81       	ld	r30, Y
    277a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    277c:	86 a3       	std	Z+38, r24	; 0x26
    277e:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	e8 81       	ld	r30, Y
    2784:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2786:	e6 fd       	sbrc	r30, 6
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <pwm_start+0x84>
		((TC0_t *)tc)->CTRLB |= enablemask;
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	89 2b       	or	r24, r25
    278e:	81 83       	std	Z+1, r24	; 0x01
    2790:	04 c0       	rjmp	.+8      	; 0x279a <pwm_start+0x8c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	80 73       	andi	r24, 0x30	; 48
    2796:	89 2b       	or	r24, r25
    2798:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    279a:	e8 81       	ld	r30, Y
    279c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    279e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    27a0:	80 7f       	andi	r24, 0xF0	; 240
    27a2:	9c 81       	ldd	r25, Y+4	; 0x04
    27a4:	89 2b       	or	r24, r25
    27a6:	80 83       	st	Z, r24
}
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	08 95       	ret

000027ae <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    27b8:	c6 2f       	mov	r28, r22
    27ba:	d0 e0       	ldi	r29, 0x00	; 0
    27bc:	de 01       	movw	r26, r28
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <ioport_configure_port_pin+0x18>
    27c2:	b5 95       	asr	r27
    27c4:	a7 95       	ror	r26
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <ioport_configure_port_pin+0x14>
    27ca:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    27cc:	50 8b       	std	Z+16, r21	; 0x10
    27ce:	2f 5f       	subi	r18, 0xFF	; 255
    27d0:	3f 4f       	sbci	r19, 0xFF	; 255
    27d2:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    27d4:	28 30       	cpi	r18, 0x08	; 8
    27d6:	31 05       	cpc	r19, r1
    27d8:	89 f7       	brne	.-30     	; 0x27bc <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    27da:	40 ff       	sbrs	r20, 0
    27dc:	0a c0       	rjmp	.+20     	; 0x27f2 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    27de:	41 ff       	sbrs	r20, 1
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    27e2:	fc 01       	movw	r30, r24
    27e4:	65 83       	std	Z+5, r22	; 0x05
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    27e8:	fc 01       	movw	r30, r24
    27ea:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    27ec:	fc 01       	movw	r30, r24
    27ee:	61 83       	std	Z+1, r22	; 0x01
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    27f2:	fc 01       	movw	r30, r24
    27f4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	08 95       	ret

000027fc <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    27fc:	43 e0       	ldi	r20, 0x03	; 3
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	61 e0       	ldi	r22, 0x01	; 1
    2802:	80 ee       	ldi	r24, 0xE0	; 224
    2804:	97 e0       	ldi	r25, 0x07	; 7
    2806:	d3 df       	rcall	.-90     	; 0x27ae <ioport_configure_port_pin>
    2808:	43 e0       	ldi	r20, 0x03	; 3
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	62 e0       	ldi	r22, 0x02	; 2
    280e:	80 ee       	ldi	r24, 0xE0	; 224
    2810:	97 e0       	ldi	r25, 0x07	; 7
    2812:	cd df       	rcall	.-102    	; 0x27ae <ioport_configure_port_pin>
    2814:	43 e0       	ldi	r20, 0x03	; 3
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	60 e1       	ldi	r22, 0x10	; 16
    281a:	80 e6       	ldi	r24, 0x60	; 96
    281c:	96 e0       	ldi	r25, 0x06	; 6
    281e:	c7 df       	rcall	.-114    	; 0x27ae <ioport_configure_port_pin>
    2820:	41 e0       	ldi	r20, 0x01	; 1
    2822:	50 e4       	ldi	r21, 0x40	; 64
    2824:	60 e2       	ldi	r22, 0x20	; 32
    2826:	80 e6       	ldi	r24, 0x60	; 96
    2828:	96 e0       	ldi	r25, 0x06	; 6
    282a:	c1 df       	rcall	.-126    	; 0x27ae <ioport_configure_port_pin>
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	5b e1       	ldi	r21, 0x1B	; 27
    2830:	60 e2       	ldi	r22, 0x20	; 32
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	96 e0       	ldi	r25, 0x06	; 6
    2836:	bb df       	rcall	.-138    	; 0x27ae <ioport_configure_port_pin>
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	5b e1       	ldi	r21, 0x1B	; 27
    283c:	62 e0       	ldi	r22, 0x02	; 2
    283e:	80 ea       	ldi	r24, 0xA0	; 160
    2840:	96 e0       	ldi	r25, 0x06	; 6
    2842:	b5 df       	rcall	.-150    	; 0x27ae <ioport_configure_port_pin>
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	5b e1       	ldi	r21, 0x1B	; 27
    2848:	64 e0       	ldi	r22, 0x04	; 4
    284a:	80 ea       	ldi	r24, 0xA0	; 160
    284c:	96 e0       	ldi	r25, 0x06	; 6
    284e:	af df       	rcall	.-162    	; 0x27ae <ioport_configure_port_pin>
    2850:	43 e0       	ldi	r20, 0x03	; 3
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	62 e0       	ldi	r22, 0x02	; 2
    2856:	80 e6       	ldi	r24, 0x60	; 96
    2858:	96 e0       	ldi	r25, 0x06	; 6
    285a:	a9 df       	rcall	.-174    	; 0x27ae <ioport_configure_port_pin>
    285c:	43 e0       	ldi	r20, 0x03	; 3
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	68 e0       	ldi	r22, 0x08	; 8
    2862:	80 e6       	ldi	r24, 0x60	; 96
    2864:	96 e0       	ldi	r25, 0x06	; 6
    2866:	a3 df       	rcall	.-186    	; 0x27ae <ioport_configure_port_pin>
    2868:	43 e0       	ldi	r20, 0x03	; 3
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	68 e0       	ldi	r22, 0x08	; 8
    286e:	80 ea       	ldi	r24, 0xA0	; 160
    2870:	96 e0       	ldi	r25, 0x06	; 6
    2872:	9d df       	rcall	.-198    	; 0x27ae <ioport_configure_port_pin>
    2874:	43 e0       	ldi	r20, 0x03	; 3
    2876:	50 e0       	ldi	r21, 0x00	; 0
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	80 e6       	ldi	r24, 0x60	; 96
    287c:	96 e0       	ldi	r25, 0x06	; 6
    287e:	97 df       	rcall	.-210    	; 0x27ae <ioport_configure_port_pin>
    2880:	43 e0       	ldi	r20, 0x03	; 3
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	68 e0       	ldi	r22, 0x08	; 8
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	96 e0       	ldi	r25, 0x06	; 6
    288a:	91 df       	rcall	.-222    	; 0x27ae <ioport_configure_port_pin>
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	60 e1       	ldi	r22, 0x10	; 16
    2892:	80 e8       	ldi	r24, 0x80	; 128
    2894:	96 e0       	ldi	r25, 0x06	; 6
    2896:	8b df       	rcall	.-234    	; 0x27ae <ioport_configure_port_pin>
    2898:	43 e0       	ldi	r20, 0x03	; 3
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	80 e6       	ldi	r24, 0x60	; 96
    28a0:	96 e0       	ldi	r25, 0x06	; 6
    28a2:	85 df       	rcall	.-246    	; 0x27ae <ioport_configure_port_pin>
    28a4:	43 e0       	ldi	r20, 0x03	; 3
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	68 e0       	ldi	r22, 0x08	; 8
    28aa:	80 e6       	ldi	r24, 0x60	; 96
    28ac:	96 e0       	ldi	r25, 0x06	; 6
    28ae:	7f df       	rcall	.-258    	; 0x27ae <ioport_configure_port_pin>
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	80 e6       	ldi	r24, 0x60	; 96
    28b8:	96 e0       	ldi	r25, 0x06	; 6
    28ba:	79 df       	rcall	.-270    	; 0x27ae <ioport_configure_port_pin>
    28bc:	43 e0       	ldi	r20, 0x03	; 3
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	60 e1       	ldi	r22, 0x10	; 16
    28c2:	80 ea       	ldi	r24, 0xA0	; 160
    28c4:	96 e0       	ldi	r25, 0x06	; 6
    28c6:	73 df       	rcall	.-282    	; 0x27ae <ioport_configure_port_pin>
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	96 e0       	ldi	r25, 0x06	; 6
    28d2:	6d df       	rcall	.-294    	; 0x27ae <ioport_configure_port_pin>
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	64 e0       	ldi	r22, 0x04	; 4
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	96 e0       	ldi	r25, 0x06	; 6
    28de:	67 df       	rcall	.-306    	; 0x27ae <ioport_configure_port_pin>
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	50 e0       	ldi	r21, 0x00	; 0
    28e4:	62 e0       	ldi	r22, 0x02	; 2
    28e6:	80 e2       	ldi	r24, 0x20	; 32
    28e8:	96 e0       	ldi	r25, 0x06	; 6
    28ea:	61 df       	rcall	.-318    	; 0x27ae <ioport_configure_port_pin>
    28ec:	43 e0       	ldi	r20, 0x03	; 3
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	68 e0       	ldi	r22, 0x08	; 8
    28f2:	80 e4       	ldi	r24, 0x40	; 64
    28f4:	96 e0       	ldi	r25, 0x06	; 6
    28f6:	5b df       	rcall	.-330    	; 0x27ae <ioport_configure_port_pin>
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	50 e0       	ldi	r21, 0x00	; 0
    28fc:	64 e0       	ldi	r22, 0x04	; 4
    28fe:	80 e4       	ldi	r24, 0x40	; 64
    2900:	96 e0       	ldi	r25, 0x06	; 6
    2902:	55 df       	rcall	.-342    	; 0x27ae <ioport_configure_port_pin>
    2904:	43 e0       	ldi	r20, 0x03	; 3
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	68 e0       	ldi	r22, 0x08	; 8
    290a:	80 e6       	ldi	r24, 0x60	; 96
    290c:	96 e0       	ldi	r25, 0x06	; 6
    290e:	4f df       	rcall	.-354    	; 0x27ae <ioport_configure_port_pin>
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	64 e0       	ldi	r22, 0x04	; 4
    2916:	80 e6       	ldi	r24, 0x60	; 96
    2918:	96 e0       	ldi	r25, 0x06	; 6
    291a:	49 df       	rcall	.-366    	; 0x27ae <ioport_configure_port_pin>
    291c:	43 e0       	ldi	r20, 0x03	; 3
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	68 e0       	ldi	r22, 0x08	; 8
    2922:	80 e8       	ldi	r24, 0x80	; 128
    2924:	96 e0       	ldi	r25, 0x06	; 6
    2926:	43 df       	rcall	.-378    	; 0x27ae <ioport_configure_port_pin>
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	50 e0       	ldi	r21, 0x00	; 0
    292c:	64 e0       	ldi	r22, 0x04	; 4
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	96 e0       	ldi	r25, 0x06	; 6
    2932:	3d cf       	rjmp	.-390    	; 0x27ae <ioport_configure_port_pin>
    2934:	08 95       	ret

00002936 <__portable_avr_delay_cycles>:
		break;
		default:
		break;
	}
	return x;
}
    2936:	04 c0       	rjmp	.+8      	; 0x2940 <__portable_avr_delay_cycles+0xa>
    2938:	61 50       	subi	r22, 0x01	; 1
    293a:	71 09       	sbc	r23, r1
    293c:	81 09       	sbc	r24, r1
    293e:	91 09       	sbc	r25, r1
    2940:	61 15       	cp	r22, r1
    2942:	71 05       	cpc	r23, r1
    2944:	81 05       	cpc	r24, r1
    2946:	91 05       	cpc	r25, r1
    2948:	b9 f7       	brne	.-18     	; 0x2938 <__portable_avr_delay_cycles+0x2>
    294a:	08 95       	ret

0000294c <adc_handler>:
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	1f 92       	push	r1
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	fc 01       	movw	r30, r24
    2958:	40 93 4a 22 	sts	0x224A, r20	; 0x80224a <switchValue>
    295c:	50 93 4b 22 	sts	0x224B, r21	; 0x80224b <switchValue+0x1>
    2960:	8f b7       	in	r24, 0x3f	; 63
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	f8 94       	cli
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	90 81       	ld	r25, Z
    296a:	66 0f       	add	r22, r22
    296c:	66 0f       	add	r22, r22
    296e:	69 2b       	or	r22, r25
    2970:	60 83       	st	Z, r22
    2972:	8f bf       	out	0x3f, r24	; 63
    2974:	0f 90       	pop	r0
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	08 95       	ret

0000297c <resetScreen>:
	delay_ms(100);
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}

void resetScreen()
{
    297c:	7f 92       	push	r7
    297e:	8f 92       	push	r8
    2980:	9f 92       	push	r9
    2982:	af 92       	push	r10
    2984:	bf 92       	push	r11
    2986:	cf 92       	push	r12
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	1f 92       	push	r1
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	int counter = 0;
	// clear display
	for (page_address = 0; page_address <= 4; page_address++) {
    299c:	10 92 4c 22 	sts	0x224C, r1	; 0x80224c <page_address>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    29a2:	0f 2e       	mov	r0, r31
    29a4:	fb e2       	ldi	r31, 0x2B	; 43
    29a6:	8f 2e       	mov	r8, r31
    29a8:	f0 2d       	mov	r31, r0
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    29aa:	00 ea       	ldi	r16, 0xA0	; 160
    29ac:	19 e0       	ldi	r17, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    29ae:	0f 2e       	mov	r0, r31
    29b0:	f0 e6       	ldi	r31, 0x60	; 96
    29b2:	ef 2e       	mov	r14, r31
    29b4:	f6 e0       	ldi	r31, 0x06	; 6
    29b6:	ff 2e       	mov	r15, r31
    29b8:	f0 2d       	mov	r31, r0
    29ba:	aa 24       	eor	r10, r10
    29bc:	a3 94       	inc	r10
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    29be:	b0 2e       	mov	r11, r16
    29c0:	c1 2e       	mov	r12, r17
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    29c2:	68 94       	set
    29c4:	99 24       	eor	r9, r9
    29c6:	96 f8       	bld	r9, 6
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    29c8:	8f 70       	andi	r24, 0x0F	; 15
    29ca:	80 6b       	ori	r24, 0xB0	; 176
    29cc:	d8 2e       	mov	r13, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    29ce:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    29d0:	be 01       	movw	r22, r28
    29d2:	6f 5f       	subi	r22, 0xFF	; 255
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255
    29d6:	c8 01       	movw	r24, r16
    29d8:	cc dc       	rcall	.-1640   	; 0x2372 <usart_spi_select_device>
    29da:	f7 01       	movw	r30, r14
    29dc:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    29de:	f8 01       	movw	r30, r16
    29e0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    29e2:	85 ff       	sbrs	r24, 5
    29e4:	fc cf       	rjmp	.-8      	; 0x29de <resetScreen+0x62>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    29e6:	d0 82       	st	Z, r13
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    29e8:	f8 01       	movw	r30, r16
    29ea:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    29ec:	86 ff       	sbrs	r24, 6
    29ee:	fc cf       	rjmp	.-8      	; 0x29e8 <resetScreen+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    29f0:	91 82       	std	Z+1, r9	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    29f2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    29f4:	be 01       	movw	r22, r28
    29f6:	6f 5f       	subi	r22, 0xFF	; 255
    29f8:	7f 4f       	sbci	r23, 0xFF	; 255
    29fa:	c8 01       	movw	r24, r16
    29fc:	d0 dc       	rcall	.-1632   	; 0x239e <usart_spi_deselect_device>
		st7565r_set_page_address(page_address);
		for (column_address = 0; column_address < 128; column_address++) {
    29fe:	10 92 49 22 	sts	0x2249, r1	; 0x802249 <column_address>
    2a02:	d1 2c       	mov	r13, r1
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    2a04:	8d 2d       	mov	r24, r13
    2a06:	8f 77       	andi	r24, 0x7F	; 127
    2a08:	82 95       	swap	r24
    2a0a:	8f 70       	andi	r24, 0x0F	; 15
    2a0c:	80 61       	ori	r24, 0x10	; 16
    2a0e:	78 2e       	mov	r7, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2a10:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2a12:	be 01       	movw	r22, r28
    2a14:	6f 5f       	subi	r22, 0xFF	; 255
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	8b 2d       	mov	r24, r11
    2a1a:	9c 2d       	mov	r25, r12
    2a1c:	aa dc       	rcall	.-1708   	; 0x2372 <usart_spi_select_device>
    2a1e:	f7 01       	movw	r30, r14
    2a20:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2a22:	f8 01       	movw	r30, r16
    2a24:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2a26:	85 ff       	sbrs	r24, 5
    2a28:	fc cf       	rjmp	.-8      	; 0x2a22 <resetScreen+0xa6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2a2a:	70 82       	st	Z, r7
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2a30:	86 ff       	sbrs	r24, 6
    2a32:	fc cf       	rjmp	.-8      	; 0x2a2c <resetScreen+0xb0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2a34:	91 82       	std	Z+1, r9	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2a36:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2a38:	be 01       	movw	r22, r28
    2a3a:	6f 5f       	subi	r22, 0xFF	; 255
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3e:	8b 2d       	mov	r24, r11
    2a40:	9c 2d       	mov	r25, r12
    2a42:	ad dc       	rcall	.-1702   	; 0x239e <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    2a44:	fd 2d       	mov	r31, r13
    2a46:	ff 70       	andi	r31, 0x0F	; 15
    2a48:	df 2e       	mov	r13, r31
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2a4a:	89 82       	std	Y+1, r8	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2a4c:	be 01       	movw	r22, r28
    2a4e:	6f 5f       	subi	r22, 0xFF	; 255
    2a50:	7f 4f       	sbci	r23, 0xFF	; 255
    2a52:	8b 2d       	mov	r24, r11
    2a54:	9c 2d       	mov	r25, r12
    2a56:	8d dc       	rcall	.-1766   	; 0x2372 <usart_spi_select_device>
    2a58:	f7 01       	movw	r30, r14
    2a5a:	a6 82       	std	Z+6, r10	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2a60:	85 ff       	sbrs	r24, 5
    2a62:	fc cf       	rjmp	.-8      	; 0x2a5c <resetScreen+0xe0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2a64:	d0 82       	st	Z, r13
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2a66:	f8 01       	movw	r30, r16
    2a68:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2a6a:	86 ff       	sbrs	r24, 6
    2a6c:	fc cf       	rjmp	.-8      	; 0x2a66 <resetScreen+0xea>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2a6e:	91 82       	std	Z+1, r9	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2a70:	80 81       	ld	r24, Z
    2a72:	be 01       	movw	r22, r28
    2a74:	6f 5f       	subi	r22, 0xFF	; 255
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	8b 2d       	mov	r24, r11
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2a7a:	9c 2d       	mov	r25, r12
    2a7c:	90 dc       	rcall	.-1760   	; 0x239e <usart_spi_deselect_device>
    2a7e:	89 82       	std	Y+1, r8	; 0x01
    2a80:	be 01       	movw	r22, r28
    2a82:	6f 5f       	subi	r22, 0xFF	; 255
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	8b 2d       	mov	r24, r11
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a88:	9c 2d       	mov	r25, r12
    2a8a:	73 dc       	rcall	.-1818   	; 0x2372 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2a8c:	f7 01       	movw	r30, r14
    2a8e:	a5 82       	std	Z+5, r10	; 0x05
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2a90:	f8 01       	movw	r30, r16
    2a92:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2a94:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2a96:	fc cf       	rjmp	.-8      	; 0x2a90 <resetScreen+0x114>
    2a98:	10 82       	st	Z, r1
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2a9e:	86 ff       	sbrs	r24, 6
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2aa0:	fc cf       	rjmp	.-8      	; 0x2a9a <resetScreen+0x11e>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2aa2:	91 82       	std	Z+1, r9	; 0x01
    2aa4:	80 81       	ld	r24, Z
    2aa6:	f7 01       	movw	r30, r14
    2aa8:	a6 82       	std	Z+6, r10	; 0x06
    2aaa:	be 01       	movw	r22, r28
    2aac:	6f 5f       	subi	r22, 0xFF	; 255
    2aae:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab0:	8b 2d       	mov	r24, r11
    2ab2:	9c 2d       	mov	r25, r12
    2ab4:	74 dc       	rcall	.-1816   	; 0x239e <usart_spi_deselect_device>
    2ab6:	d0 90 49 22 	lds	r13, 0x2249	; 0x802249 <column_address>
    2aba:	d3 94       	inc	r13
    2abc:	d0 92 49 22 	sts	0x2249, r13	; 0x802249 <column_address>

void resetScreen()
{
	int counter = 0;
	// clear display
	for (page_address = 0; page_address <= 4; page_address++) {
    2ac0:	dd 20       	and	r13, r13
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <resetScreen+0x14a>
    2ac4:	9f cf       	rjmp	.-194    	; 0x2a04 <resetScreen+0x88>
    2ac6:	80 91 4c 22 	lds	r24, 0x224C	; 0x80224c <page_address>
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <page_address>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2ad0:	85 30       	cpi	r24, 0x05	; 5
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2ad2:	08 f4       	brcc	.+2      	; 0x2ad6 <resetScreen+0x15a>
    2ad4:	79 cf       	rjmp	.-270    	; 0x29c8 <resetScreen+0x4c>
    2ad6:	8b e2       	ldi	r24, 0x2B	; 43
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	be 01       	movw	r22, r28
    2adc:	6f 5f       	subi	r22, 0xFF	; 255
    2ade:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae0:	80 ea       	ldi	r24, 0xA0	; 160
    2ae2:	99 e0       	ldi	r25, 0x09	; 9
    2ae4:	46 dc       	rcall	.-1908   	; 0x2372 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2aec:	e0 ea       	ldi	r30, 0xA0	; 160
    2aee:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2af0:	81 81       	ldd	r24, Z+1	; 0x01
    2af2:	85 ff       	sbrs	r24, 5
    2af4:	fd cf       	rjmp	.-6      	; 0x2af0 <resetScreen+0x174>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2af6:	80 eb       	ldi	r24, 0xB0	; 176
    2af8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2afc:	e0 ea       	ldi	r30, 0xA0	; 160
    2afe:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2b00:	81 81       	ldd	r24, Z+1	; 0x01
    2b02:	86 ff       	sbrs	r24, 6
    2b04:	fd cf       	rjmp	.-6      	; 0x2b00 <resetScreen+0x184>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2b06:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2b08:	f9 e0       	ldi	r31, 0x09	; 9
    2b0a:	80 e4       	ldi	r24, 0x40	; 64
    2b0c:	81 83       	std	Z+1, r24	; 0x01
    2b0e:	80 81       	ld	r24, Z
    2b10:	be 01       	movw	r22, r28
    2b12:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2b14:	7f 4f       	sbci	r23, 0xFF	; 255
    2b16:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2b18:	99 e0       	ldi	r25, 0x09	; 9
    2b1a:	41 dc       	rcall	.-1918   	; 0x239e <usart_spi_deselect_device>
    2b1c:	8b e2       	ldi	r24, 0x2B	; 43
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	be 01       	movw	r22, r28
    2b22:	6f 5f       	subi	r22, 0xFF	; 255
    2b24:	7f 4f       	sbci	r23, 0xFF	; 255
    2b26:	80 ea       	ldi	r24, 0xA0	; 160
    2b28:	99 e0       	ldi	r25, 0x09	; 9
    2b2a:	23 dc       	rcall	.-1978   	; 0x2372 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2b32:	e0 ea       	ldi	r30, 0xA0	; 160
    2b34:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2b36:	81 81       	ldd	r24, Z+1	; 0x01
    2b38:	85 ff       	sbrs	r24, 5
    2b3a:	fd cf       	rjmp	.-6      	; 0x2b36 <resetScreen+0x1ba>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2b3c:	80 e1       	ldi	r24, 0x10	; 16
    2b3e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2b42:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2b44:	f9 e0       	ldi	r31, 0x09	; 9
    2b46:	81 81       	ldd	r24, Z+1	; 0x01
    2b48:	86 ff       	sbrs	r24, 6
    2b4a:	fd cf       	rjmp	.-6      	; 0x2b46 <resetScreen+0x1ca>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2b4c:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2b4e:	f9 e0       	ldi	r31, 0x09	; 9
    2b50:	80 e4       	ldi	r24, 0x40	; 64
    2b52:	81 83       	std	Z+1, r24	; 0x01
    2b54:	80 81       	ld	r24, Z
    2b56:	be 01       	movw	r22, r28
    2b58:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5c:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2b5e:	99 e0       	ldi	r25, 0x09	; 9
    2b60:	1e dc       	rcall	.-1988   	; 0x239e <usart_spi_deselect_device>
    2b62:	8b e2       	ldi	r24, 0x2B	; 43
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	be 01       	movw	r22, r28
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	80 ea       	ldi	r24, 0xA0	; 160
    2b6e:	99 e0       	ldi	r25, 0x09	; 9
    2b70:	00 dc       	rcall	.-2048   	; 0x2372 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2b78:	e0 ea       	ldi	r30, 0xA0	; 160
    2b7a:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2b7c:	81 81       	ldd	r24, Z+1	; 0x01
    2b7e:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2b80:	fd cf       	rjmp	.-6      	; 0x2b7c <resetScreen+0x200>
    2b82:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2b86:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2b88:	f9 e0       	ldi	r31, 0x09	; 9
    2b8a:	81 81       	ldd	r24, Z+1	; 0x01
    2b8c:	86 ff       	sbrs	r24, 6
    2b8e:	fd cf       	rjmp	.-6      	; 0x2b8a <resetScreen+0x20e>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2b90:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2b92:	f9 e0       	ldi	r31, 0x09	; 9
    2b94:	80 e4       	ldi	r24, 0x40	; 64
    2b96:	81 83       	std	Z+1, r24	; 0x01
    2b98:	80 81       	ld	r24, Z
    2b9a:	be 01       	movw	r22, r28
    2b9c:	6f 5f       	subi	r22, 0xFF	; 255
    2b9e:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}

	st7565r_set_page_address(0);
	st7565r_set_column_address(0);
}
    2ba0:	80 ea       	ldi	r24, 0xA0	; 160
    2ba2:	99 e0       	ldi	r25, 0x09	; 9
    2ba4:	fc db       	rcall	.-2056   	; 0x239e <usart_spi_deselect_device>
    2ba6:	0f 90       	pop	r0
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	ff 90       	pop	r15
    2bb2:	ef 90       	pop	r14
    2bb4:	df 90       	pop	r13
    2bb6:	cf 90       	pop	r12
    2bb8:	bf 90       	pop	r11
    2bba:	af 90       	pop	r10
    2bbc:	9f 90       	pop	r9
    2bbe:	8f 90       	pop	r8
    2bc0:	7f 90       	pop	r7
    2bc2:	08 95       	ret

00002bc4 <displayCharacter>:
	}
	return x;
}

void displayCharacter(uint8_t character)
{
    2bc4:	6f 92       	push	r6
    2bc6:	7f 92       	push	r7
    2bc8:	8f 92       	push	r8
    2bca:	9f 92       	push	r9
    2bcc:	af 92       	push	r10
    2bce:	bf 92       	push	r11
    2bd0:	cf 92       	push	r12
    2bd2:	df 92       	push	r13
    2bd4:	ef 92       	push	r14
    2bd6:	ff 92       	push	r15
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	1f 92       	push	r1
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	18 2f       	mov	r17, r24
    2be8:	80 e1       	ldi	r24, 0x10	; 16
    2bea:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	// set addresses at beginning of display
	gpio_set_pin_low(NHD_C12832A1Z_BACKLIGHT); //turns backlight off

	if (character == 37) {
    2bee:	15 32       	cpi	r17, 0x25	; 37
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <displayCharacter+0x30>
    2bf2:	ed c0       	rjmp	.+474    	; 0x2dce <displayCharacter+0x20a>
		start_line_address += 7;
    2bf4:	80 91 22 22 	lds	r24, 0x2222	; 0x802222 <start_line_address>
		st7565r_set_display_start_line_address(start_line_address++);
    2bf8:	98 e0       	ldi	r25, 0x08	; 8
    2bfa:	98 0f       	add	r25, r24
    2bfc:	90 93 22 22 	sts	0x2222, r25	; 0x802222 <start_line_address>
 */
static inline void st7565r_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	st7565r_write_command(ST7565R_CMD_START_LINE_SET(address));
    2c00:	07 e0       	ldi	r16, 0x07	; 7
    2c02:	08 0f       	add	r16, r24
    2c04:	0f 73       	andi	r16, 0x3F	; 63
    2c06:	00 64       	ori	r16, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2c08:	8b e2       	ldi	r24, 0x2B	; 43
    2c0a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2c0c:	be 01       	movw	r22, r28
    2c0e:	6f 5f       	subi	r22, 0xFF	; 255
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	80 ea       	ldi	r24, 0xA0	; 160
    2c14:	99 e0       	ldi	r25, 0x09	; 9
    2c16:	ad db       	rcall	.-2214   	; 0x2372 <usart_spi_select_device>
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2c1e:	e0 ea       	ldi	r30, 0xA0	; 160
    2c20:	f9 e0       	ldi	r31, 0x09	; 9
    2c22:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2c24:	85 ff       	sbrs	r24, 5
    2c26:	fd cf       	rjmp	.-6      	; 0x2c22 <displayCharacter+0x5e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2c28:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2c2c:	e0 ea       	ldi	r30, 0xA0	; 160
    2c2e:	f9 e0       	ldi	r31, 0x09	; 9
    2c30:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2c32:	86 ff       	sbrs	r24, 6
    2c34:	fd cf       	rjmp	.-6      	; 0x2c30 <displayCharacter+0x6c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2c36:	e0 ea       	ldi	r30, 0xA0	; 160
    2c38:	f9 e0       	ldi	r31, 0x09	; 9
    2c3a:	80 e4       	ldi	r24, 0x40	; 64
    2c3c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2c3e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2c40:	be 01       	movw	r22, r28
    2c42:	6f 5f       	subi	r22, 0xFF	; 255
    2c44:	7f 4f       	sbci	r23, 0xFF	; 255
    2c46:	80 ea       	ldi	r24, 0xA0	; 160
    2c48:	99 e0       	ldi	r25, 0x09	; 9
    2c4a:	a9 db       	rcall	.-2222   	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2c4c:	8b e2       	ldi	r24, 0x2B	; 43
    2c4e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2c50:	be 01       	movw	r22, r28
    2c52:	6f 5f       	subi	r22, 0xFF	; 255
    2c54:	7f 4f       	sbci	r23, 0xFF	; 255
    2c56:	80 ea       	ldi	r24, 0xA0	; 160
    2c58:	99 e0       	ldi	r25, 0x09	; 9
    2c5a:	8b db       	rcall	.-2282   	; 0x2372 <usart_spi_select_device>
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2c62:	e0 ea       	ldi	r30, 0xA0	; 160
    2c64:	f9 e0       	ldi	r31, 0x09	; 9
    2c66:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2c68:	85 ff       	sbrs	r24, 5
    2c6a:	fd cf       	rjmp	.-6      	; 0x2c66 <displayCharacter+0xa2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2c6c:	80 e1       	ldi	r24, 0x10	; 16
    2c6e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2c72:	e0 ea       	ldi	r30, 0xA0	; 160
    2c74:	f9 e0       	ldi	r31, 0x09	; 9
    2c76:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2c78:	86 ff       	sbrs	r24, 6
    2c7a:	fd cf       	rjmp	.-6      	; 0x2c76 <displayCharacter+0xb2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2c7c:	e0 ea       	ldi	r30, 0xA0	; 160
    2c7e:	f9 e0       	ldi	r31, 0x09	; 9
    2c80:	80 e4       	ldi	r24, 0x40	; 64
    2c82:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2c84:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2c86:	be 01       	movw	r22, r28
    2c88:	6f 5f       	subi	r22, 0xFF	; 255
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	80 ea       	ldi	r24, 0xA0	; 160
    2c8e:	99 e0       	ldi	r25, 0x09	; 9
    2c90:	86 db       	rcall	.-2292   	; 0x239e <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2c92:	8b e2       	ldi	r24, 0x2B	; 43
    2c94:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2c96:	be 01       	movw	r22, r28
    2c98:	6f 5f       	subi	r22, 0xFF	; 255
    2c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9c:	80 ea       	ldi	r24, 0xA0	; 160
    2c9e:	99 e0       	ldi	r25, 0x09	; 9
    2ca0:	68 db       	rcall	.-2352   	; 0x2372 <usart_spi_select_device>
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2ca8:	e0 ea       	ldi	r30, 0xA0	; 160
    2caa:	f9 e0       	ldi	r31, 0x09	; 9
    2cac:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2cae:	85 ff       	sbrs	r24, 5
    2cb0:	fd cf       	rjmp	.-6      	; 0x2cac <displayCharacter+0xe8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2cb2:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2cb6:	e0 ea       	ldi	r30, 0xA0	; 160
    2cb8:	f9 e0       	ldi	r31, 0x09	; 9
    2cba:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2cbc:	86 ff       	sbrs	r24, 6
    2cbe:	fd cf       	rjmp	.-6      	; 0x2cba <displayCharacter+0xf6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2cc0:	e0 ea       	ldi	r30, 0xA0	; 160
    2cc2:	f9 e0       	ldi	r31, 0x09	; 9
    2cc4:	80 e4       	ldi	r24, 0x40	; 64
    2cc6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2cc8:	80 81       	ld	r24, Z
    2cca:	be 01       	movw	r22, r28
    2ccc:	6f 5f       	subi	r22, 0xFF	; 255
    2cce:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd0:	80 ea       	ldi	r24, 0xA0	; 160
    2cd2:	99 e0       	ldi	r25, 0x09	; 9
		st7565r_set_column_address(0);
		st7565r_set_page_address(++page_address);
    2cd4:	64 db       	rcall	.-2360   	; 0x239e <usart_spi_deselect_device>
    2cd6:	80 91 4c 22 	lds	r24, 0x224C	; 0x80224c <page_address>
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	80 93 4c 22 	sts	0x224C, r24	; 0x80224c <page_address>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    2ce0:	8f 70       	andi	r24, 0x0F	; 15
    2ce2:	08 2f       	mov	r16, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2ce4:	00 6b       	ori	r16, 0xB0	; 176
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2ce6:	8b e2       	ldi	r24, 0x2B	; 43
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	be 01       	movw	r22, r28
    2cec:	6f 5f       	subi	r22, 0xFF	; 255
    2cee:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf0:	80 ea       	ldi	r24, 0xA0	; 160
    2cf2:	99 e0       	ldi	r25, 0x09	; 9
    2cf4:	3e db       	rcall	.-2436   	; 0x2372 <usart_spi_select_device>
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2cfc:	e0 ea       	ldi	r30, 0xA0	; 160
    2cfe:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2d00:	81 81       	ldd	r24, Z+1	; 0x01
    2d02:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2d04:	fd cf       	rjmp	.-6      	; 0x2d00 <displayCharacter+0x13c>
    2d06:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2d0a:	e0 ea       	ldi	r30, 0xA0	; 160
    2d0c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2d0e:	81 81       	ldd	r24, Z+1	; 0x01
    2d10:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2d12:	fd cf       	rjmp	.-6      	; 0x2d0e <displayCharacter+0x14a>
    2d14:	e0 ea       	ldi	r30, 0xA0	; 160
    2d16:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2d18:	80 e4       	ldi	r24, 0x40	; 64
    2d1a:	81 83       	std	Z+1, r24	; 0x01
    2d1c:	80 81       	ld	r24, Z
    2d1e:	be 01       	movw	r22, r28
    2d20:	6f 5f       	subi	r22, 0xFF	; 255
    2d22:	7f 4f       	sbci	r23, 0xFF	; 255
    2d24:	80 ea       	ldi	r24, 0xA0	; 160
	}

	int i;
	if (character == 100) {
		resetScreen();
    2d26:	99 e0       	ldi	r25, 0x09	; 9
    2d28:	3a db       	rcall	.-2444   	; 0x239e <usart_spi_deselect_device>
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <displayCharacter+0x16c>
    2d2c:	27 de       	rcall	.-946    	; 0x297c <resetScreen>
    2d2e:	46 c0       	rjmp	.+140    	; 0x2dbc <displayCharacter+0x1f8>
    2d30:	81 2f       	mov	r24, r17
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	6c 01       	movw	r12, r24
    2d36:	cc 0c       	add	r12, r12
    2d38:	dd 1c       	adc	r13, r13
    2d3a:	8c 0d       	add	r24, r12
    2d3c:	9d 1d       	adc	r25, r13
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	9c 01       	movw	r18, r24
    2d48:	2d 5a       	subi	r18, 0xAD	; 173
    2d4a:	3e 4d       	sbci	r19, 0xDE	; 222
    2d4c:	79 01       	movw	r14, r18
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e1 5a       	subi	r30, 0xA1	; 161
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2d52:	fe 4d       	sbci	r31, 0xDE	; 222
    2d54:	6f 01       	movw	r12, r30
    2d56:	0f 2e       	mov	r0, r31
    2d58:	fb e2       	ldi	r31, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2d5a:	6f 2e       	mov	r6, r31
    2d5c:	f0 2d       	mov	r31, r0
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2d5e:	00 ea       	ldi	r16, 0xA0	; 160
    2d60:	19 e0       	ldi	r17, 0x09	; 9
    2d62:	0f 2e       	mov	r0, r31
    2d64:	f0 e6       	ldi	r31, 0x60	; 96
    2d66:	af 2e       	mov	r10, r31
    2d68:	f6 e0       	ldi	r31, 0x06	; 6
    2d6a:	bf 2e       	mov	r11, r31
    2d6c:	f0 2d       	mov	r31, r0
    2d6e:	99 24       	eor	r9, r9
    2d70:	93 94       	inc	r9
    2d72:	68 94       	set
	}
	else {
		for (i = 0; i < 6; i++)
		{
			st7565r_write_data(Characters[character+26][i]);
    2d74:	77 24       	eor	r7, r7
    2d76:	76 f8       	bld	r7, 6
    2d78:	f7 01       	movw	r30, r14
    2d7a:	80 80       	ld	r8, Z
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    2d7c:	f2 e0       	ldi	r31, 0x02	; 2
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    2d7e:	ef 0e       	add	r14, r31
    2d80:	f1 1c       	adc	r15, r1
    2d82:	69 82       	std	Y+1, r6	; 0x01
    2d84:	be 01       	movw	r22, r28
    2d86:	6f 5f       	subi	r22, 0xFF	; 255
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	c8 01       	movw	r24, r16
    2d8c:	f2 da       	rcall	.-2588   	; 0x2372 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    2d8e:	f5 01       	movw	r30, r10
    2d90:	95 82       	std	Z+5, r9	; 0x05
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    2d92:	f8 01       	movw	r30, r16
    2d94:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    2d96:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    2d98:	fc cf       	rjmp	.-8      	; 0x2d92 <displayCharacter+0x1ce>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    2d9a:	80 82       	st	Z, r8
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    2d9c:	f8 01       	movw	r30, r16
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    2d9e:	81 81       	ldd	r24, Z+1	; 0x01
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2da0:	86 ff       	sbrs	r24, 6
    2da2:	fc cf       	rjmp	.-8      	; 0x2d9c <displayCharacter+0x1d8>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    2da4:	71 82       	std	Z+1, r7	; 0x01
    2da6:	80 81       	ld	r24, Z
    2da8:	f5 01       	movw	r30, r10
    2daa:	96 82       	std	Z+6, r9	; 0x06
    2dac:	be 01       	movw	r22, r28
	int i;
	if (character == 100) {
		resetScreen();
	}
	else {
		for (i = 0; i < 6; i++)
    2dae:	6f 5f       	subi	r22, 0xFF	; 255
    2db0:	7f 4f       	sbci	r23, 0xFF	; 255
    2db2:	c8 01       	movw	r24, r16
		{
			st7565r_write_data(Characters[character+26][i]);
		}
	}
	delay_ms(100);
    2db4:	f4 da       	rcall	.-2584   	; 0x239e <usart_spi_deselect_device>
    2db6:	ec 14       	cp	r14, r12
    2db8:	fd 04       	cpc	r15, r13
    2dba:	f1 f6       	brne	.-68     	; 0x2d78 <displayCharacter+0x1b4>
    2dbc:	66 ed       	ldi	r22, 0xD6	; 214
    2dbe:	78 e0       	ldi	r23, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	b8 dd       	rcall	.-1168   	; 0x2936 <__portable_avr_delay_cycles>
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}
    2dc6:	80 e1       	ldi	r24, 0x10	; 16
		st7565r_set_column_address(0);
		st7565r_set_page_address(++page_address);
	}

	int i;
	if (character == 100) {
    2dc8:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2dcc:	04 c0       	rjmp	.+8      	; 0x2dd6 <displayCharacter+0x212>
    2dce:	14 36       	cpi	r17, 0x64	; 100
			st7565r_write_data(Characters[character+26][i]);
		}
	}
	delay_ms(100);
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on
}
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <displayCharacter+0x210>
    2dd2:	ae cf       	rjmp	.-164    	; 0x2d30 <displayCharacter+0x16c>
    2dd4:	ab cf       	rjmp	.-170    	; 0x2d2c <displayCharacter+0x168>
    2dd6:	0f 90       	pop	r0
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	1f 91       	pop	r17
    2dde:	0f 91       	pop	r16
    2de0:	ff 90       	pop	r15
    2de2:	ef 90       	pop	r14
    2de4:	df 90       	pop	r13
    2de6:	cf 90       	pop	r12
    2de8:	bf 90       	pop	r11
    2dea:	af 90       	pop	r10
    2dec:	9f 90       	pop	r9
    2dee:	8f 90       	pop	r8
    2df0:	7f 90       	pop	r7
    2df2:	6f 90       	pop	r6
    2df4:	08 95       	ret

00002df6 <main>:

struct pwm_config mypwm[4];
signed int switchValue;

int main(void)
{
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	a0 97       	sbiw	r28, 0x20	; 32
    2e00:	cd bf       	out	0x3d, r28	; 61
	struct adc_config         adc_conf;
	struct adc_channel_config adcch_conf;
	
	board_init();
	sysclk_init();
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	fb dc       	rcall	.-1546   	; 0x27fc <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2e06:	e1 da       	rcall	.-2622   	; 0x23ca <sysclk_init>
    2e08:	e3 e2       	ldi	r30, 0x23	; 35
    2e0a:	f2 e2       	ldi	r31, 0x22	; 34
    2e0c:	10 82       	st	Z, r1
    2e0e:	11 82       	std	Z+1, r1	; 0x01
    2e10:	12 82       	std	Z+2, r1	; 0x02
    2e12:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2e14:	14 82       	std	Z+4, r1	; 0x04
    2e16:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();
	irq_initialize_vectors();
    2e18:	15 83       	std	Z+5, r17	; 0x05
    2e1a:	87 e0       	ldi	r24, 0x07	; 7
    2e1c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    2e20:	78 94       	sei
    2e22:	80 e1       	ldi	r24, 0x10	; 16
    2e24:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	cpu_irq_enable();

	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT); //turns backlight on

	// initialize the interface (SPI), ST7565R LCD controller and LCD
	st7565r_init();
    2e28:	0e 94 32 01 	call	0x264	; 0x264 <st7565r_init>
	
	adc_read_configuration(&ADCB, &adc_conf);
    2e2c:	be 01       	movw	r22, r28
    2e2e:	6f 5f       	subi	r22, 0xFF	; 255
    2e30:	7f 4f       	sbci	r23, 0xFF	; 255
    2e32:	80 e4       	ldi	r24, 0x40	; 64
    2e34:	92 e0       	ldi	r25, 0x02	; 2
    2e36:	0e 94 94 05 	call	0xb28	; 0xb28 <adc_read_configuration>
	adcch_read_configuration(&ADCB, ADC_CH0, &adcch_conf);
    2e3a:	ae 01       	movw	r20, r28
    2e3c:	48 5f       	subi	r20, 0xF8	; 248
    2e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	80 e4       	ldi	r24, 0x40	; 64
    2e44:	92 e0       	ldi	r25, 0x02	; 2
    2e46:	0e 94 18 06 	call	0xc30	; 0xc30 <adcch_read_configuration>
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    2e4e:	8f 78       	andi	r24, 0x8F	; 143
    2e50:	24 e0       	ldi	r18, 0x04	; 4
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    2e52:	2d 83       	std	Y+5, r18	; 0x05
    2e54:	91 7e       	andi	r25, 0xE1	; 225
    2e56:	94 61       	ori	r25, 0x14	; 20
		conf->evctrl = ADC_EVACT_NONE_gc;
    2e58:	9a 83       	std	Y+2, r25	; 0x02
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
    2e5a:	1c 82       	std	Y+4, r1	; 0x04
    2e5c:	81 61       	ori	r24, 0x11	; 17
	ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);
	
	adc_write_configuration(&ADCB, &adc_conf);
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
    2e60:	be 01       	movw	r22, r28
    2e62:	6f 5f       	subi	r22, 0xFF	; 255
    2e64:	7f 4f       	sbci	r23, 0xFF	; 255
    2e66:	80 e4       	ldi	r24, 0x40	; 64
    2e68:	92 e0       	ldi	r25, 0x02	; 2
    2e6a:	0e 94 2a 05 	call	0xa54	; 0xa54 <adc_write_configuration>
	adc_set_callback(&ADCB, &adc_handler);
    2e6e:	66 ea       	ldi	r22, 0xA6	; 166
    2e70:	74 e1       	ldi	r23, 0x14	; 20
    2e72:	80 e4       	ldi	r24, 0x40	; 64
    2e74:	92 e0       	ldi	r25, 0x02	; 2
    2e76:	0e 94 0e 03 	call	0x61c	; 0x61c <adc_set_callback>
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    2e7a:	18 87       	std	Y+8, r17	; 0x08
    2e7c:	88 e0       	ldi	r24, 0x08	; 8
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    2e7e:	89 87       	std	Y+9, r24	; 0x09
    2e80:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e82:	80 7f       	andi	r24, 0xF0	; 240
    2e84:	81 60       	ori	r24, 0x01	; 1
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE,
	1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);
	
	adcch_write_configuration(&ADCB, ADC_CH0, &adcch_conf);
    2e86:	8a 87       	std	Y+10, r24	; 0x0a
    2e88:	ae 01       	movw	r20, r28
    2e8a:	48 5f       	subi	r20, 0xF8	; 248
    2e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
    2e90:	80 e4       	ldi	r24, 0x40	; 64
    2e92:	92 e0       	ldi	r25, 0x02	; 2
    2e94:	0e 94 cd 05 	call	0xb9a	; 0xb9a <adcch_write_configuration>
	
	// Enable the ADC and start the first conversion.
	adc_enable(&ADCB);
    2e98:	80 e4       	ldi	r24, 0x40	; 64
    2e9a:	92 e0       	ldi	r25, 0x02	; 2
    2e9c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <adc_enable>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2ea0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2ea2:	88 a3       	std	Y+32, r24	; 0x20
	return flags;
    2ea4:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
    2ea6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ea8:	e0 e4       	ldi	r30, 0x40	; 64
    2eaa:	f2 e0       	ldi	r31, 0x02	; 2
    2eac:	80 81       	ld	r24, Z
    2eae:	84 60       	ori	r24, 0x04	; 4
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2eb0:	80 83       	st	Z, r24
	adc_start_conversion(&ADCB, ADC_CH0);
	
	pwm_init(&mypwm[0], PWM_TCE0, PWM_CH_A, 50);
    2eb2:	9f bf       	out	0x3f, r25	; 63
    2eb4:	22 e3       	ldi	r18, 0x32	; 50
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	41 e0       	ldi	r20, 0x01	; 1
    2eba:	64 e0       	ldi	r22, 0x04	; 4
    2ebc:	8d e2       	ldi	r24, 0x2D	; 45
	// set addresses at beginning of display
	resetScreen();
    2ebe:	92 e2       	ldi	r25, 0x22	; 34
    2ec0:	60 db       	rcall	.-2368   	; 0x2582 <pwm_init>
		.paritytype = USART_SERIAL_PARITY,
		.stopbits = USART_SERIAL_STOP_BIT
	};
	
	// Initialize usart driver in RS232 mode
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    2ec2:	5c dd       	rcall	.-1352   	; 0x297c <resetScreen>
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	70 e2       	ldi	r23, 0x20	; 32
    2ec8:	80 ea       	ldi	r24, 0xA0	; 160
    2eca:	98 e0       	ldi	r25, 0x08	; 8
    2ecc:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <usart_init_rs232>

	uint8_t tx_buf[] = "\n\rEnter a message: ";
    2ed0:	84 e1       	ldi	r24, 0x14	; 20
    2ed2:	e7 e0       	ldi	r30, 0x07	; 7
    2ed4:	f0 e2       	ldi	r31, 0x20	; 32
    2ed6:	de 01       	movw	r26, r28
    2ed8:	1c 96       	adiw	r26, 0x0c	; 12
    2eda:	01 90       	ld	r0, Z+
    2edc:	0d 92       	st	X+, r0
    2ede:	8a 95       	dec	r24
    2ee0:	e1 f7       	brne	.-8      	; 0x2eda <main+0xe4>
    2ee2:	8e 01       	movw	r16, r28
    2ee4:	04 5f       	subi	r16, 0xF4	; 244
    2ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee8:	7e 01       	movw	r14, r28
    2eea:	8c e8       	ldi	r24, 0x8C	; 140
    2eec:	e8 0e       	add	r14, r24
	int tx_length = 128;
	int i;
	for (i = 0; i < tx_length; i++) {
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
    2eee:	f1 1c       	adc	r15, r1
    2ef0:	f8 01       	movw	r30, r16
    2ef2:	61 91       	ld	r22, Z+
    2ef4:	8f 01       	movw	r16, r30
    2ef6:	80 ea       	ldi	r24, 0xA0	; 160
    2ef8:	98 e0       	ldi	r25, 0x08	; 8
    2efa:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <usart_putchar>
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);

	uint8_t tx_buf[] = "\n\rEnter a message: ";
	int tx_length = 128;
	int i;
	for (i = 0; i < tx_length; i++) {
    2efe:	0e 15       	cp	r16, r14
    2f00:	1f 05       	cpc	r17, r15
		usart_putchar(USART_SERIAL_EXAMPLE, tx_buf[i]);
	}

	uint8_t input;
	while (true) {
		input = usart_getchar(USART_SERIAL_EXAMPLE);
    2f02:	b1 f7       	brne	.-20     	; 0x2ef0 <main+0xfa>
    2f04:	80 ea       	ldi	r24, 0xA0	; 160
    2f06:	98 e0       	ldi	r25, 0x08	; 8
		int userInput = getCharacter(input);

		if(input > 0 && input <10){
    2f08:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <usart_getchar>
			displayCharacter(input);
    2f0c:	9f ef       	ldi	r25, 0xFF	; 255
			pwm_start(&mypwm[0], 2);
    2f0e:	98 0f       	add	r25, r24
    2f10:	99 30       	cpi	r25, 0x09	; 9
    2f12:	c0 f7       	brcc	.-16     	; 0x2f04 <main+0x10e>
    2f14:	57 de       	rcall	.-850    	; 0x2bc4 <displayCharacter>
    2f16:	62 e0       	ldi	r22, 0x02	; 2
			int counter = 0;
			//pwm_start(&mypwm[0], 0);
			while(switchValue < 50 && counter < 50) {
    2f18:	8d e2       	ldi	r24, 0x2D	; 45
    2f1a:	92 e2       	ldi	r25, 0x22	; 34
    2f1c:	f8 db       	rcall	.-2064   	; 0x270e <pwm_start>
    2f1e:	80 91 4a 22 	lds	r24, 0x224A	; 0x80224a <switchValue>
    2f22:	90 91 4b 22 	lds	r25, 0x224B	; 0x80224b <switchValue+0x1>
				counter++;
				delay_ms(100);
    2f26:	c2 97       	sbiw	r24, 0x32	; 50
    2f28:	6c f4       	brge	.+26     	; 0x2f44 <main+0x14e>
    2f2a:	02 e3       	ldi	r16, 0x32	; 50
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	66 ed       	ldi	r22, 0xD6	; 214
    2f30:	78 e0       	ldi	r23, 0x08	; 8
		if(input > 0 && input <10){
			displayCharacter(input);
			pwm_start(&mypwm[0], 2);
			int counter = 0;
			//pwm_start(&mypwm[0], 0);
			while(switchValue < 50 && counter < 50) {
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	ff dc       	rcall	.-1538   	; 0x2936 <__portable_avr_delay_cycles>
    2f38:	80 91 4a 22 	lds	r24, 0x224A	; 0x80224a <switchValue>
    2f3c:	90 91 4b 22 	lds	r25, 0x224B	; 0x80224b <switchValue+0x1>
				counter++;
				delay_ms(100);
			}
			//While read switch is open - do nothing
			while(switchValue > 50) {
    2f40:	c2 97       	sbiw	r24, 0x32	; 50
    2f42:	3c f0       	brlt	.+14     	; 0x2f52 <main+0x15c>
    2f44:	80 91 4a 22 	lds	r24, 0x224A	; 0x80224a <switchValue>
    2f48:	90 91 4b 22 	lds	r25, 0x224B	; 0x80224b <switchValue+0x1>
    2f4c:	c3 97       	sbiw	r24, 0x33	; 51
		if(input > 0 && input <10){
			displayCharacter(input);
			pwm_start(&mypwm[0], 2);
			int counter = 0;
			//pwm_start(&mypwm[0], 0);
			while(switchValue < 50 && counter < 50) {
    2f4e:	2c f4       	brge	.+10     	; 0x2f5a <main+0x164>
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <main+0x17a>
				counter++;
				delay_ms(100);
			}
			//While read switch is open - do nothing
			while(switchValue > 50) {
				delay_ms(100);
    2f52:	01 50       	subi	r16, 0x01	; 1
    2f54:	11 09       	sbc	r17, r1
    2f56:	59 f7       	brne	.-42     	; 0x2f2e <main+0x138>
    2f58:	f5 cf       	rjmp	.-22     	; 0x2f44 <main+0x14e>
    2f5a:	66 ed       	ldi	r22, 0xD6	; 214
    2f5c:	78 e0       	ldi	r23, 0x08	; 8
			while(switchValue < 50 && counter < 50) {
				counter++;
				delay_ms(100);
			}
			//While read switch is open - do nothing
			while(switchValue > 50) {
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	e9 dc       	rcall	.-1582   	; 0x2936 <__portable_avr_delay_cycles>
    2f64:	80 91 4a 22 	lds	r24, 0x224A	; 0x80224a <switchValue>
				delay_ms(100);
			}
			
			delay_ms(500);
    2f68:	90 91 4b 22 	lds	r25, 0x224B	; 0x80224b <switchValue+0x1>
    2f6c:	c3 97       	sbiw	r24, 0x33	; 51

			pwm_start(&mypwm[0], 7.5);
    2f6e:	ac f7       	brge	.-22     	; 0x2f5a <main+0x164>
    2f70:	6b e2       	ldi	r22, 0x2B	; 43
    2f72:	7c e2       	ldi	r23, 0x2C	; 44
    2f74:	8a e0       	ldi	r24, 0x0A	; 10
			
			delay_s(2);
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	de dc       	rcall	.-1604   	; 0x2936 <__portable_avr_delay_cycles>
    2f7a:	67 e0       	ldi	r22, 0x07	; 7
    2f7c:	8d e2       	ldi	r24, 0x2D	; 45
    2f7e:	92 e2       	ldi	r25, 0x22	; 34
    2f80:	c6 db       	rcall	.-2164   	; 0x270e <pwm_start>
			
			pwm_start(&mypwm[0], 0);
    2f82:	6b ea       	ldi	r22, 0xAB	; 171
    2f84:	70 eb       	ldi	r23, 0xB0	; 176
    2f86:	88 e2       	ldi	r24, 0x28	; 40
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	d5 dc       	rcall	.-1622   	; 0x2936 <__portable_avr_delay_cycles>
    2f8c:	60 e0       	ldi	r22, 0x00	; 0
    2f8e:	8d e2       	ldi	r24, 0x2D	; 45
    2f90:	92 e2       	ldi	r25, 0x22	; 34
    2f92:	bd db       	rcall	.-2182   	; 0x270e <pwm_start>
    2f94:	b7 cf       	rjmp	.-146    	; 0x2f04 <main+0x10e>

00002f96 <__udivmodsi4>:
    2f96:	a1 e2       	ldi	r26, 0x21	; 33
    2f98:	1a 2e       	mov	r1, r26
    2f9a:	aa 1b       	sub	r26, r26
    2f9c:	bb 1b       	sub	r27, r27
    2f9e:	fd 01       	movw	r30, r26
    2fa0:	0d c0       	rjmp	.+26     	; 0x2fbc <__udivmodsi4_ep>

00002fa2 <__udivmodsi4_loop>:
    2fa2:	aa 1f       	adc	r26, r26
    2fa4:	bb 1f       	adc	r27, r27
    2fa6:	ee 1f       	adc	r30, r30
    2fa8:	ff 1f       	adc	r31, r31
    2faa:	a2 17       	cp	r26, r18
    2fac:	b3 07       	cpc	r27, r19
    2fae:	e4 07       	cpc	r30, r20
    2fb0:	f5 07       	cpc	r31, r21
    2fb2:	20 f0       	brcs	.+8      	; 0x2fbc <__udivmodsi4_ep>
    2fb4:	a2 1b       	sub	r26, r18
    2fb6:	b3 0b       	sbc	r27, r19
    2fb8:	e4 0b       	sbc	r30, r20
    2fba:	f5 0b       	sbc	r31, r21

00002fbc <__udivmodsi4_ep>:
    2fbc:	66 1f       	adc	r22, r22
    2fbe:	77 1f       	adc	r23, r23
    2fc0:	88 1f       	adc	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	1a 94       	dec	r1
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <__udivmodsi4_loop>
    2fc8:	60 95       	com	r22
    2fca:	70 95       	com	r23
    2fcc:	80 95       	com	r24
    2fce:	90 95       	com	r25
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	bd 01       	movw	r22, r26
    2fd6:	cf 01       	movw	r24, r30
    2fd8:	08 95       	ret

00002fda <__tablejump2__>:
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	88 1f       	adc	r24, r24
    2fe0:	8b bf       	out	0x3b, r24	; 59
    2fe2:	07 90       	elpm	r0, Z+
    2fe4:	f6 91       	elpm	r31, Z
    2fe6:	e0 2d       	mov	r30, r0
    2fe8:	19 94       	eijmp

00002fea <__umulhisi3>:
    2fea:	a2 9f       	mul	r26, r18
    2fec:	b0 01       	movw	r22, r0
    2fee:	b3 9f       	mul	r27, r19
    2ff0:	c0 01       	movw	r24, r0
    2ff2:	a3 9f       	mul	r26, r19
    2ff4:	70 0d       	add	r23, r0
    2ff6:	81 1d       	adc	r24, r1
    2ff8:	11 24       	eor	r1, r1
    2ffa:	91 1d       	adc	r25, r1
    2ffc:	b2 9f       	mul	r27, r18
    2ffe:	70 0d       	add	r23, r0
    3000:	81 1d       	adc	r24, r1
    3002:	11 24       	eor	r1, r1
    3004:	91 1d       	adc	r25, r1
    3006:	08 95       	ret

00003008 <_exit>:
    3008:	f8 94       	cli

0000300a <__stop_program>:
    300a:	ff cf       	rjmp	.-2      	; 0x300a <__stop_program>
